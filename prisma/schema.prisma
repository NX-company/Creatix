generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String        @id @default(uuid())
  email                        String        @unique
  name                         String?
  username                     String?       @unique
  password                     String?
  role                         Role          @default(USER)
  appMode                      AppMode       @default(FREE)
  isActive                     Boolean       @default(true)
  balance                      Float         @default(0)
  autoRenewEnabled             Boolean       @default(false)
  subscriptionEndsAt           DateTime?
  subscriptionStartedAt        DateTime?
  totalTokensUsed              Int           @default(0)
  totalApiCost                 Float         @default(0)
  projectsCount                Int           @default(0)
  projectsLimit                Int           @default(5)
  filesCount                   Int           @default(0)
  filesLimit                   Int           @default(70)
  emailVerified                DateTime?
  image                        String?
  lastIpAddress                String?
  lastActive                   DateTime?
  freeGenerationsRemaining     Int           @default(20)
  freeGenerationsUsed          Int           @default(0)
  advancedGenerationsTotal     Int           @default(0)
  advancedGenerationsRemaining Int           @default(0)
  advancedGenerationsUsed      Int           @default(0)
  inpaintOperationsCount       Int           @default(0)
  subscriptionStatus           String        @default("none")
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  accounts                     Account[]
  apiUsage                     ApiUsage[]
  projects                     Project[]
  sessions                     Session[]
  transactions                 Transaction[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiUsage {
  id         String   @id @default(uuid())
  userId     String
  provider   String
  model      String
  endpoint   String
  tokensUsed Int      @default(0)
  cost       Float    @default(0)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  amount    Float
  type      String
  status    String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ModeSettings {
  id              String   @id @default(uuid())
  freeEnabled     Boolean  @default(true)
  advancedEnabled Boolean  @default(true)
  proEnabled      Boolean  @default(true)
  updatedAt       DateTime @updatedAt
}

model Project {
  id           String               @id @default(uuid())
  userId       String
  name         String
  docType      String
  workMode     String               @default("plan")
  styleConfig  String?
  sections     String?
  priceItems   String?
  s3Key        String?
  s3Url        String?
  fileSize     Int?
  isSaved      Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  files        ProjectFile[]
  messages     ProjectMessage[]
  planningData ProjectPlanningData?

  @@index([userId, createdAt])
}

model ProjectMessage {
  id        String   @id @default(uuid())
  projectId String
  role      String
  content   String
  type      String?
  timestamp DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectFile {
  id         String   @id @default(uuid())
  projectId  String
  fileName   String
  fileType   String
  fileSize   Int
  s3Key      String
  s3Url      String
  uploadedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model ProjectPlanningData {
  id                   String  @id @default(uuid())
  projectId            String  @unique
  theme                String?
  targetAudience       String?
  goals                String?
  keyMessages          String?
  visualPreferences    String?
  additionalNotes      String?
  selectedQuestions    String?
  pageCount            Int?
  currentQuestionIndex Int     @default(0)
  answerMode           String?
  collectedAnswers     String?
  isComplete           Boolean @default(false)
  project              Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum AppMode {
  FREE
  ADVANCED
  GUEST
}
