generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String    @id @default(uuid())
  email                      String    @unique
  name                       String?
  username                   String?   @unique
  password                   String?
  role                       Role      @default(USER)
  appMode                    AppMode   @default(FREE)
  isActive                   Boolean   @default(true)

  // Подписка и баланс
  balance                    Float     @default(0)          // Баланс в рублях
  autoRenewEnabled           Boolean   @default(false)      // Автопродление подписки
  subscriptionEndsAt         DateTime?                      // Когда заканчивается ADVANCED подписка
  subscriptionStartedAt      DateTime?                      // Когда купили ADVANCED

  // Счетчики генераций (сколько ИСПОЛЬЗОВАНО)
  freeMonthlyGenerations     Int       @default(0)          // 0→10 (FREE режим)
  advancedMonthlyGenerations Int       @default(0)          // 0→80 (ADVANCED из подписки)
  purchasedGenerations       Float     @default(0)          // Купленные доп. генерации (бессрочные)

  // Лимиты
  generationLimit            Int       @default(10)         // 10 для FREE, 80 для ADVANCED

  // Даты сброса
  lastResetDate              DateTime?                      // Последний сброс FREE режима

  // DEPRECATED (для обратной совместимости, удалим позже)
  trialEndsAt                DateTime?
  trialGenerations           Int       @default(0)
  monthlyGenerations         Int       @default(0)
  bonusGenerations           Int       @default(0)

  // Token Usage Tracking
  totalTokensUsed Int @default(0) // Общий расход токенов пользователем
  totalApiCost    Float @default(0) // Общая стоимость API вызовов

  // S3 Storage Limits
  projectsCount Int @default(0) // Текущее количество проектов
  projectsLimit Int @default(5) // Лимит: 5 проектов
  filesCount    Int @default(0) // Текущее количество файлов (общий на все проекты)
  filesLimit    Int @default(70) // Лимит: 70 файлов на все проекты

  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions     Session[]
  apiUsage     ApiUsage[]
  transactions Transaction[]
  projects     Project[]
  accounts     Account[]
}

enum Role {
  USER
  ADMIN
}

enum AppMode {
  FREE
  ADVANCED
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiUsage {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   String
  model      String
  endpoint   String
  tokensUsed Int      @default(0)
  cost       Float    @default(0)
  createdAt  DateTime @default(now())
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  type      String   // 'SUBSCRIPTION' или 'BONUS_PACK'
  status    String   // 'PENDING', 'COMPLETED', 'FAILED'
  metadata  Json?    // Дополнительные данные: paymentId, targetMode, paymentType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModeSettings {
  id              String   @id @default(uuid())
  freeEnabled     Boolean  @default(true)
  advancedEnabled Boolean  @default(true)
  proEnabled      Boolean  @default(true)
  updatedAt       DateTime @updatedAt
}

model Project {
  id          String  @id @default(uuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  docType     String
  workMode    String  @default("plan")
  styleConfig String?
  sections    String?
  priceItems  String?

  // S3 Storage
  s3Key    String? // Путь в S3: documents/user-{userId}/{projectId}.html
  s3Url    String? // Полный URL для доступа к файлу
  fileSize Int? // Размер HTML файла в байтах
  isSaved  Boolean @default(false) // Сохранен ли проект в S3

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     ProjectMessage[]
  files        ProjectFile[]
  planningData ProjectPlanningData?

  @@index([userId, createdAt]) // Индекс для быстрой сортировки по дате создания
}

model ProjectMessage {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      String
  content   String
  type      String?
  timestamp DateTime @default(now())
}

model ProjectFile {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fileName  String
  fileType  String // image/png, image/jpeg, etc.
  fileSize  Int // Размер в байтах

  // S3 Storage
  s3Key String // Путь в S3: images/user-{userId}/uploads/{fileId}.{ext}
  s3Url String // Полный URL для доступа

  uploadedAt DateTime @default(now())

  @@index([projectId])
}

model ProjectPlanningData {
  id                   String  @id @default(uuid())
  projectId            String  @unique
  project              Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  theme                String?
  targetAudience       String?
  goals                String?
  keyMessages          String?
  visualPreferences    String?
  additionalNotes      String?
  selectedQuestions    String?
  pageCount            Int?
  currentQuestionIndex Int     @default(0)
  answerMode           String?
  collectedAnswers     String?
  isComplete           Boolean @default(false)
}
