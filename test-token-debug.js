/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
 */

const TOCHKA_BASE_URL = 'https://enter.tochka.com';
const TOCHKA_CLIENT_ID = '8161e24317f44aa387b813c8673a5014';
const TOCHKA_CLIENT_SECRET = 'abe1861057a5461bb80115bfe3b0d8a9';

async function debugToken() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ OAuth —Ç–æ–∫–µ–Ω–∞...\n');

  const tokenUrl = `${TOCHKA_BASE_URL}/connect/token`;

  // –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ–∑ scope
  console.log('1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ scope...');
  await testTokenRequest(tokenUrl, {
    grant_type: 'client_credentials',
    client_id: TOCHKA_CLIENT_ID,
    client_secret: TOCHKA_CLIENT_SECRET,
  });

  // –í–∞—Ä–∏–∞–Ω—Ç 2: –° —Ä–∞–∑–Ω—ã–º–∏ scope
  const scopes = [
    'acquiring',
    'payments',
    'openbanking',
    'open_banking',
    'sbp',
    'acquiring payments',
    'acquiring sbp',
  ];

  for (const scope of scopes) {
    console.log(`\n2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ scope: "${scope}"...`);
    await testTokenRequest(tokenUrl, {
      grant_type: 'client_credentials',
      client_id: TOCHKA_CLIENT_ID,
      client_secret: TOCHKA_CLIENT_SECRET,
      scope: scope,
    });
  }
}

async function testTokenRequest(url, params) {
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams(params).toString(),
    });

    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

    const data = await response.json();

    if (response.ok) {
      console.log('   ‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:');
      console.log(JSON.stringify(data, null, 2));

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ —ç—Ç–æ JWT
      if (data.access_token) {
        console.log(`\n   –¢–æ–∫–µ–Ω: ${data.access_token}`);

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —ç—Ç–æ JWT –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ base64?
        const parts = data.access_token.split('.');
        if (parts.length === 3) {
          console.log('   üîç –≠—Ç–æ JWT —Ç–æ–∫–µ–Ω! –î–µ–∫–æ–¥–∏—Ä—É–µ–º...');
          try {
            const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
            console.log('   Payload:', JSON.stringify(payload, null, 2));
          } catch (e) {
            console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT');
          }
        } else {
          console.log('   ‚ÑπÔ∏è  –≠—Ç–æ –Ω–µ JWT —Ç–æ–∫–µ–Ω (–Ω–µ 3 —á–∞—Å—Ç–∏)');
          // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ base64
          try {
            const decoded = Buffer.from(data.access_token, 'base64').toString();
            console.log(`   Base64 decoded: ${decoded}`);
          } catch (e) {
            console.log('   ‚ÑπÔ∏è  –ù–µ base64');
          }
        }
      }
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞:', JSON.stringify(data, null, 2));
    }
  } catch (error) {
    console.log('   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
  }
}

debugToken().catch(console.error);
