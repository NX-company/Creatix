/**
 * –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ API –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞
 */

const TOCHKA_BASE_URL = 'https://enter.tochka.com';
const TOCHKA_CLIENT_ID = '8161e24317f44aa387b813c8673a5014';
const TOCHKA_CLIENT_SECRET = 'abe1861057a5461bb80115bfe3b0d8a9';

// –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const pathVariants = [
  '/uapi/open_banking/v1/customers',
  '/uapi/open_banking/v2/customers',
  '/api/v1/open_banking/v1/customers',
  '/api/v2/open_banking/v1/customers',
  '/api/v2/open_banking/v2/customers',
  '/api/open_banking/v1/customers',
  '/open-api/v1/customers',
  '/sbp-api/open_banking/v1/customers',
];

async function findCorrectPath() {
  console.log('üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ API –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞...\n');

  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
  console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞...');
  const tokenUrl = `${TOCHKA_BASE_URL}/connect/token`;

  const params = new URLSearchParams({
    grant_type: 'client_credentials',
    client_id: TOCHKA_CLIENT_ID,
    client_secret: TOCHKA_CLIENT_SECRET,
  });

  const tokenResponse = await fetch(tokenUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: params.toString(),
  });

  if (!tokenResponse.ok) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
    return;
  }

  const tokenData = await tokenResponse.json();
  const accessToken = tokenData.access_token;

  console.log(`‚úÖ OAuth —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (expires in ${tokenData.expires_in}s)\n`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π API...\n');

  for (const path of pathVariants) {
    const fullUrl = `${TOCHKA_BASE_URL}${path}`;
    console.log(`–ü—Ä–æ–±—É–µ–º: ${fullUrl}`);

    try {
      const response = await fetch(fullUrl, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      });

      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        console.log('   ‚úÖ‚úÖ‚úÖ –£–°–ü–ï–•! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å! ‚úÖ‚úÖ‚úÖ');
        console.log('   –û—Ç–≤–µ—Ç:');
        console.log(JSON.stringify(data, null, 2));
        console.log('');
        console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å: ${path}`);
        return path;
      } else {
        const errorText = await response.text();
        console.log(`   ‚ùå ${errorText.substring(0, 80)}...`);
      }
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    }

    console.log('');
  }

  console.log('‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ –ø—É—Ç–µ–π –Ω–µ –ø–æ–¥–æ—à–µ–ª. –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π endpoint.');
}

findCorrectPath().catch(console.error);
