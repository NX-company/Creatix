/**
 * API Key Pool Manager
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ API –∫–ª—é—á–∞–º–∏ —Å load balancing –∏ health checks
 */

interface ApiKeyConfig {
  key: string
  provider: 'openrouter' | 'replicate' | 'openai'
  isHealthy: boolean
  requestCount: number
  errorCount: number
  lastError: Date | null
  rateLimit: {
    requestsPerMinute: number
    currentMinute: number
    requestsThisMinute: number
  }
}

interface KeyPoolStats {
  totalKeys: number
  healthyKeys: number
  totalRequests: number
  totalErrors: number
  averageLoad: number
}

class ApiKeyPoolManager {
  private keys: Map<string, ApiKeyConfig> = new Map()
  private roundRobinIndex = 0
  private readonly maxErrorsBeforeDisable = 5
  private readonly healthCheckInterval = 60000 // 1 –º–∏–Ω—É—Ç–∞
  private healthCheckTimer: NodeJS.Timeout | null = null

  constructor() {
    this.initializeKeys()
    this.startHealthChecks()
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private initializeKeys(): void {
    // OpenRouter –∫–ª—é—á–∏
    const openrouterKeys = this.getKeysFromEnv('OPENROUTER_API_KEY')
    openrouterKeys.forEach((key, index) => {
      this.keys.set(`openrouter-${index}`, {
        key,
        provider: 'openrouter',
        isHealthy: true,
        requestCount: 0,
        errorCount: 0,
        lastError: null,
        rateLimit: {
          requestsPerMinute: 300, // –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç OpenRouter
          currentMinute: this.getCurrentMinute(),
          requestsThisMinute: 0,
        },
      })
    })

    // Replicate –∫–ª—é—á–∏
    const replicateKeys = this.getKeysFromEnv('REPLICATE_API_TOKEN')
    replicateKeys.forEach((key, index) => {
      this.keys.set(`replicate-${index}`, {
        key,
        provider: 'replicate',
        isHealthy: true,
        requestCount: 0,
        errorCount: 0,
        lastError: null,
        rateLimit: {
          requestsPerMinute: 3000, // Replicate –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç
          currentMinute: this.getCurrentMinute(),
          requestsThisMinute: 0,
        },
      })
    })

    // OpenAI –∫–ª—é—á–∏ (DALL-E 3)
    const openaiKeys = this.getKeysFromEnv('OPENAI_API_KEY')
    openaiKeys.forEach((key, index) => {
      this.keys.set(`openai-${index}`, {
        key,
        provider: 'openai',
        isHealthy: true,
        requestCount: 0,
        errorCount: 0,
        lastError: null,
        rateLimit: {
          requestsPerMinute: 5, // DALL-E 3 –º–µ–¥–ª–µ–Ω–Ω—ã–π
          currentMinute: this.getCurrentMinute(),
          requestsThisMinute: 0,
        },
      })
    })

    console.log(`üîë API Key Pool initialized: ${this.keys.size} total keys`)
    console.log(`   OpenRouter: ${openrouterKeys.length} keys`)
    console.log(`   Replicate: ${replicateKeys.length} keys`)
    console.log(`   OpenAI: ${openaiKeys.length} keys`)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: KEY, KEY_1, KEY_2, KEY_3...
   */
  private getKeysFromEnv(baseKey: string): string[] {
    const keys: string[] = []

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª—é—á
    const baseValue = process.env[baseKey]?.trim()
    if (baseValue) {
      keys.push(baseValue)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ (KEY_1, KEY_2, –∏ —Ç.–¥.)
    let index = 1
    while (true) {
      const numberedKey = process.env[`${baseKey}_${index}`]?.trim()
      if (!numberedKey) break
      keys.push(numberedKey)
      index++
    }

    return keys
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É (–¥–ª—è rate limiting)
   */
  private getCurrentMinute(): number {
    return Math.floor(Date.now() / 60000)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç round-robin —Å —É—á–µ—Ç–æ–º health –∏ rate limits
   */
  getKey(provider: 'openrouter' | 'replicate' | 'openai'): string | null {
    const providerKeys = Array.from(this.keys.entries()).filter(
      ([, config]) => config.provider === provider && config.isHealthy
    )

    if (providerKeys.length === 0) {
      console.error(`‚ùå No healthy ${provider} keys available!`)
      return null
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω rate limit
    const currentMinute = this.getCurrentMinute()
    const availableKeys = providerKeys.filter(([, config]) => {
      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤–∞—è –º–∏–Ω—É—Ç–∞
      if (config.rateLimit.currentMinute !== currentMinute) {
        config.rateLimit.currentMinute = currentMinute
        config.rateLimit.requestsThisMinute = 0
      }

      return config.rateLimit.requestsThisMinute < config.rateLimit.requestsPerMinute
    })

    if (availableKeys.length === 0) {
      console.warn(`‚ö†Ô∏è All ${provider} keys are rate limited. Using fallback...`)
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
      const fallbackKey = providerKeys.reduce((min, curr) =>
        curr[1].rateLimit.requestsThisMinute < min[1].rateLimit.requestsThisMinute
          ? curr
          : min
      )
      return fallbackKey[1].key
    }

    // Round-robin –≤—ã–±–æ—Ä —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π
    this.roundRobinIndex = (this.roundRobinIndex + 1) % availableKeys.length
    const selectedKey = availableKeys[this.roundRobinIndex]

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    selectedKey[1].requestCount++
    selectedKey[1].rateLimit.requestsThisMinute++

    console.log(
      `üîë Selected ${provider} key: ${selectedKey[0]} (${selectedKey[1].rateLimit.requestsThisMinute}/${selectedKey[1].rateLimit.requestsPerMinute} rpm)`
    )

    return selectedKey[1].key
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   */
  markSuccess(key: string): void {
    const keyId = this.findKeyId(key)
    if (!keyId) return

    const config = this.keys.get(keyId)
    if (!config) return

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    config.errorCount = Math.max(0, config.errorCount - 1)
    config.lastError = null

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å–ª–∏ –∫–ª—é—á –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∑–¥–æ—Ä–æ–≤—ã–π
    if (!config.isHealthy && config.errorCount === 0) {
      config.isHealthy = true
      console.log(`‚úÖ Key ${keyId} restored to healthy state`)
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É –∑–∞–ø—Ä–æ—Å–∞
   */
  markError(key: string, error: Error): void {
    const keyId = this.findKeyId(key)
    if (!keyId) return

    const config = this.keys.get(keyId)
    if (!config) return

    config.errorCount++
    config.lastError = new Date()

    console.warn(
      `‚ö†Ô∏è Key ${keyId} error (${config.errorCount}/${this.maxErrorsBeforeDisable}): ${error.message}`
    )

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª—é—á –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
    if (config.errorCount >= this.maxErrorsBeforeDisable) {
      config.isHealthy = false
      console.error(`‚ùå Key ${keyId} marked as unhealthy after ${config.errorCount} errors`)
    }
  }

  /**
   * –ù–∞–π—Ç–∏ ID –∫–ª—é—á–∞ –ø–æ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—é
   */
  private findKeyId(key: string): string | null {
    for (const [id, config] of this.keys.entries()) {
      if (config.key === key) {
        return id
      }
    }
    return null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ –∫–ª—é—á–µ–π
   */
  getStats(): KeyPoolStats {
    const stats = Array.from(this.keys.values())

    return {
      totalKeys: this.keys.size,
      healthyKeys: stats.filter((k) => k.isHealthy).length,
      totalRequests: stats.reduce((sum, k) => sum + k.requestCount, 0),
      totalErrors: stats.reduce((sum, k) => sum + k.errorCount, 0),
      averageLoad:
        stats.reduce((sum, k) => sum + k.rateLimit.requestsThisMinute, 0) / stats.length,
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
   */
  getProviderStats(provider: 'openrouter' | 'replicate' | 'openai'): any {
    const providerKeys = Array.from(this.keys.entries()).filter(
      ([, config]) => config.provider === provider
    )

    return providerKeys.map(([id, config]) => ({
      id,
      isHealthy: config.isHealthy,
      requestCount: config.requestCount,
      errorCount: config.errorCount,
      currentLoad: `${config.rateLimit.requestsThisMinute}/${config.rateLimit.requestsPerMinute}`,
      lastError: config.lastError?.toISOString() || null,
    }))
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª—é—á–µ–π
   */
  private startHealthChecks(): void {
    this.healthCheckTimer = setInterval(() => {
      const stats = this.getStats()
      console.log(`üè• Health Check: ${stats.healthyKeys}/${stats.totalKeys} healthy keys`)

      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∑–¥–æ—Ä–æ–≤—ã–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
      const fiveMinutesAgo = Date.now() - 5 * 60 * 1000
      for (const [id, config] of this.keys.entries()) {
        if (
          !config.isHealthy &&
          config.lastError &&
          config.lastError.getTime() < fiveMinutesAgo
        ) {
          config.isHealthy = true
          config.errorCount = 0
          console.log(`‚ôªÔ∏è Key ${id} auto-recovered after cooldown period`)
        }
      }
    }, this.healthCheckInterval)
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å health checks (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  stopHealthChecks(): void {
    if (this.healthCheckTimer) {
      clearInterval(this.healthCheckTimer)
      this.healthCheckTimer = null
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–¥–æ—Ä–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  getHealthyKeysCount(provider: 'openrouter' | 'replicate' | 'openai'): number {
    return Array.from(this.keys.values()).filter(
      (config) => config.provider === provider && config.isHealthy
    ).length
  }
}

// Singleton instance
let apiKeyPoolInstance: ApiKeyPoolManager | null = null

export function getApiKeyPool(): ApiKeyPoolManager {
  if (!apiKeyPoolInstance) {
    apiKeyPoolInstance = new ApiKeyPoolManager()
  }
  return apiKeyPoolInstance
}

export type { ApiKeyConfig, KeyPoolStats }

