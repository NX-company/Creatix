import { PROMPTS, type PromptConfig } from './prompts'
import type { DocType } from './store'
import { fetchWithTimeout } from './fetchWithTimeout'
import { API_TIMEOUTS } from './constants'
import { getModernDesignPrompt } from './designPrompts'

export const generateContent = async (prompt: string, docType: string, model: string = "google/gemini-2.5-flash-lite"): Promise<string> => {
  try {
    const systemPrompt = getSystemPrompt(docType)
    
    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: "system", content: systemPrompt + "\n\n–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è." },
          { role: "user", content: prompt }
        ],
        model: model,
        temperature: 0.7
      }),
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('OpenRouter API request failed')
    }

    const data = await response.json()
    let content = data.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    content = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    return content
  } catch (error) {
    console.error('API Error:', error)
    return `–û—à–∏–±–∫–∞ API: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
  }
}

export const generateContentWithImages = async (
  prompt: string,
  docType: string,
  images: Array<{ id: string; name: string; base64: string; type: string }> = [],
  model: string = "google/gemini-2.0-flash-001"
): Promise<string> => {
  try {
    const systemPrompt = getSystemPrompt(docType)
    
    if (images.length === 0) {
      return generateContent(prompt, docType, model)
    }

    console.log(`üîç Multimodal generation with ${images.length} images using ${model}`)

    const content: any[] = [
      {
        type: "text",
        text: prompt
      }
    ]

    images.forEach((img, i) => {
      content.push({
        type: "image_url",
        image_url: {
          url: img.base64
        }
      })
    })

    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: "system", content: systemPrompt + "\n\n–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è." },
          { role: "user", content: content }
        ],
        model: model,
        temperature: 0.7
      }),
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('OpenRouter API request failed')
    }

    const data = await response.json()
    let result = data.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    result = result.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    console.log(`‚úÖ Multimodal generation complete`)
    
    return result
  } catch (error) {
    console.error('Multimodal API Error:', error)
    console.log('‚ö†Ô∏è  Falling back to text-only generation')
    return generateContent(prompt, docType, model)
  }
}

export const generateHTML = async (
  content: string,
  docType: string,
  styleConfig: any,
  uploadedImages: Array<{ id: string; name: string; base64: string; type: string }> = [],
  model: string = "google/gemini-2.5-flash-lite"
): Promise<string> => {
  try {
    console.log(`üèóÔ∏è  HTML Composer: Using model ${model}`)
    console.log(`   Images to include: ${uploadedImages.length}`)
    
    if (uploadedImages.length > 0) {
      uploadedImages.forEach((img, i) => {
        console.log(`      ${i}. ${img.name} (id: ${img.id})`)
      })
    }
    
    // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º base64 –≤ –ø—Ä–æ–º–ø—Ç - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const imagesInfo = uploadedImages.length > 0
      ? `\n\nüì∏ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (${uploadedImages.length} —à—Ç):
${uploadedImages.map((img, i) => `${i + 1}. "${img.name}" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π placeholder IMAGE_${i}`).join('\n')}

üéØ –ü–†–ê–í–ò–õ–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4, IMAGE_5... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)!

–î–ª—è –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (proposal):
- IMAGE_0: –õ–û–ì–û–¢–ò–ü –ö–û–ú–ü–ê–ù–ò–ò –≤ —à–∞–ø–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, max-width: 180px)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ: –≥–ª–∞–≤–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ–º–∞–Ω–¥–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3...)

–î–ª—è –°–ß–Å–¢–ê (invoice):
- IMAGE_0: –õ–û–ì–û–¢–ò–ü –ö–û–ú–ü–ê–ù–ò–ò –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—á—ë—Ç–∞ (—Å–ø—Ä–∞–≤–∞ –≤ —à–∞–ø–∫–µ, max-width: 150px)
- IMAGE_1+: –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–û–í–ê–†–û–í/–£–°–õ–£–ì - —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∑–∏—Ü–∏–π —Ä—è–¥–æ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ (max-width: 80px, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ)
- –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫—Ä—É–≥—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
- –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ —á–µ–º —Ç–æ–≤–∞—Ä–æ–≤ - –≤—Å—Ç–∞–≤—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –ü–ò–°–¨–ú–ê (email):
- IMAGE_0: –õ–æ–≥–æ—Ç–∏–ø –≤ —à–∞–ø–∫–µ –ø–∏—Å—å–º–∞ (—Å–ª–µ–≤–∞ –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, max-width: 160px)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Å—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞ –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, —á–µ—Ä–µ–¥—É–π —Å —Ç–µ–∫—Å—Ç–æ–º
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3...)

–î–ª—è –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò (presentation):
- IMAGE_0: –ù–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–º —Å–ª–∞–π–¥–µ (–∫–∞–∫ –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ, max-width: 300px)
- IMAGE_1+: –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–ª–∞–π–¥–∞–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (–Ω–∞ –∫–∞–∂–¥–æ–º —Å–ª–∞–π–¥–µ –º–∞–∫—Å–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
- –°–æ–∑–¥–∞–π —Å—Ç–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –õ–û–ì–û–¢–ò–ü–ê (logo):
- –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–∞
- –ü–æ–∫–∞–∂–∏ –∏—Ö –≤ —Å–µ—Ç–∫–µ (2-3 –∫–æ–ª–æ–Ω–∫–∏) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
- –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (max-width: 300px)
- –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ (5+) - —Å–¥–µ–ª–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ—Ç–∫—É
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–ê (product-card):
- IMAGE_0: –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–±–æ–ª—å—à–æ–µ, max-width: 100%, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ—é –ø–æ–¥ –≥–ª–∞–≤–Ω—ã–º —Ñ–æ—Ç–æ (max-width: 48% –¥–ª—è –∫–∞–∂–¥–æ–≥–æ, —Å–µ—Ç–∫–∞ 2 –∫–æ–ª–æ–Ω–∫–∏)
- –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–Ω–æ–≥–æ - —Å–¥–µ–ª–∞–π –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –≥–∞–ª–µ—Ä–µ—é
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

üìù –ö–ê–ö –í–°–¢–ê–í–õ–Ø–¢–¨:
<img src="IMAGE_0" alt="${uploadedImages[0]?.name || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}" style="max-width: 200px; height: auto;" />

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –í–°–¢–ê–í–õ–Ø–ô base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã IMAGE_0, IMAGE_1, IMAGE_2 –∏ —Ç.–¥.
- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º: <img src="IMAGE_0" ... /> –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ data:image
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –†–∞–∑–º–µ—â–∞–π –∏—Ö –ª–æ–≥–∏—á–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –î–æ–±–∞–≤–ª—è–π CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (border-radius, box-shadow, etc.)
- –î–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤: max-width 150-200px, –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π: max-width 100%`
      : ''
    
    const modernDesign = getModernDesignPrompt(docType as any, styleConfig)
    
    const prompt = `
üéØ –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –ü–û–õ–ù–´–ô, –°–û–í–†–ï–ú–ï–ù–ù–´–ô HTML –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ò–î–ï–ê–õ–¨–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìÑ –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–ê:
${content}

üé® –ü–ê–†–ê–ú–ï–¢–†–´:
–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docType}
–°—Ç–∏–ª—å: ${JSON.stringify(styleConfig)}${imagesInfo}

${modernDesign}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¶–í–ï–¢–ê:
–ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –≠–¢–ò –¶–í–ï–¢–ê –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è:
- PRIMARY COLOR: ${styleConfig.primaryColor} - –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫, –∞–∫—Ü–µ–Ω—Ç–æ–≤, —Ü–µ–Ω, –±–µ–π–¥–∂–µ–π —Å–∫–∏–¥–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –≥—Ä–∞–Ω–∏—Ü
- SECONDARY COLOR: ${styleConfig.secondaryColor} - –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- FONT: ${styleConfig.font}

üö´ –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞ (#667eea, #764ba2, #e31e24 –∏ —Ç.–¥.) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤!

üé® –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö –¢–û–í–ê–†–û–í (product-card):
- –ë–ª–æ–∫ —Ü–µ–Ω—ã: background: linear-gradient(135deg, ${styleConfig.primaryColor}, ${styleConfig.secondaryColor})
- –ë–µ–π–¥–∂ —Å–∫–∏–¥–∫–∏: background: ${styleConfig.primaryColor}
- –ì—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤: border: 2px solid ${styleConfig.primaryColor}
- –§–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞: –í–°–ï–ì–î–ê #FFFFFF (–±–µ–ª—ã–π)

üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î:

1. –ü–û–ù–ò–ú–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê:
   - –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–π–º–∏ –µ–≥–æ —Å—É—Ç—å
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π)
   - –£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (${docType})

2. –°–¢–†–£–ö–¢–£–†–ê –ò –î–ò–ó–ê–ô–ù:
   - –°–æ–∑–¥–∞–π –ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è ${docType}
   - –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω 2025 (–ù–ï –ö–ê–ö –ì–ê–ó–ï–¢–ê!)
   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
   - –¶–≤–µ—Ç–∞: –∏—Å–ø–æ–ª—å–∑—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ styleConfig
   - –®—Ä–∏—Ñ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç

3. –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–µ—Å–ª–∏ –µ—Å—Ç—å):
   - –†–∞–∑–º–µ—â–∞–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2...)
   - –õ–æ–≥–∏—á–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ü–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç (–æ—Ç <!DOCTYPE html> –¥–æ </html>)
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ (inline + <style> –≤ <head>)
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω (media queries –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ spacing
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π base64 –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã IMAGE_0, IMAGE_1
- –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–õ–ù–´–ú –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–°–û–ó–î–ê–ô –ò–î–ï–ê–õ–¨–ù–´–ô –î–û–ö–£–ú–ï–ù–¢, –ö–û–¢–û–†–´–ô –ü–û–ù–†–ê–í–ò–¢–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ!
`

    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: "system", content: `–¢—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é HTML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–∏–∑–∞–π–Ω–∞.

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
- –ü–æ–Ω–∏–º–∞—Ç—å –ù–ê–ú–ï–†–ï–ù–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ü–û–õ–ù–´–ï, –≤–∞–ª–∏–¥–Ω—ã–µ HTML –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ (inline + <style>)
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
- –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π base64, data:image, –∏–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: IMAGE_0, IMAGE_1, IMAGE_2 –∏ —Ç.–¥.
- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–ß–ù–û —Ç–∞–∫–∏–º: <img src="IMAGE_0" alt="..." />
- –ù–ï –î–û–ë–ê–í–õ–Ø–ô –ø—Ä–µ—Ñ–∏–∫—Å data:image –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ —Å–ª—ç—à
- –ü—Ä–æ—Å—Ç–æ IMAGE_0, IMAGE_1, IMAGE_2 –≤ –∞—Ç—Ä–∏–±—É—Ç–µ src (–±–µ–∑ / –≤ –Ω–∞—á–∞–ª–µ!)

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –¢–ï–ì–û–í:
‚úÖ <img src="IMAGE_0" alt="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="width: 100%;" />
‚úÖ <img src="IMAGE_1" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2" style="max-width: 300px;" />
‚úÖ <img src="IMAGE_2" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3" />

–ü–†–ò–ú–ï–†–´ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –¢–ï–ì–û–í:
‚ùå <img src="/IMAGE_0" /> - –ù–ï–¢ —Å–ª—ç—à–∞ –≤ –Ω–∞—á–∞–ª–µ!
‚ùå <img src="./IMAGE_0" /> - –ù–ï–¢ –ø—Ä–µ—Ñ–∏–∫—Å–∞!
‚ùå <img src="data:image/png;base64,..." />
‚ùå <img src="https://..." />
‚ùå <img src="" />
‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—ã–µ src

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–°–¢–ê–í–¨ –í–°–ï –ü–õ–ï–ô–°–•–û–õ–î–ï–†–´, –ö–û–¢–û–†–´–ï –£–ö–ê–ó–ê–ù–´ –í –ü–†–û–ú–ü–¢–ï!

–¢—ã —Å–æ–∑–¥–∞–µ—à—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ø–µ—á–∞—Ç–ª—è—é—Ç!` },
          { role: "user", content: prompt }
        ],
        model: model,
        temperature: 0.7
      }),
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('HTML generation failed')
    }

    const data = await response.json()
    let html = data.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML"
    
    // –£–±–∏—Ä–∞–µ–º markdown –æ–±–µ—Ä—Ç–∫–∏
    html = html.replace(/```html\n?/gi, '')
    html = html.replace(/```\n?/g, '')
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç "html" –≤ –Ω–∞—á–∞–ª–µ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    html = html.replace(/^html\s*/i, '')
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ
    html = html.trim()
    
    // FALLBACK: –ï—Å–ª–∏ Gemini –Ω–µ –≤—Å—Ç–∞–≤–∏–ª IMAGE –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –≤—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    const expectedImageCount = uploadedImages.length
    if (expectedImageCount > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ IMAGE_0, IMAGE_1 –∏ —Ç.–¥. –≤ HTML
      const hasPlaceholders = /IMAGE_\d+/.test(html)
      
      if (!hasPlaceholders) {
        console.log(`‚ö†Ô∏è  Gemini didn't insert IMAGE placeholders! Adding them manually...`)
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ HTML
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏—â–µ–º <body> –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const bodyMatch = html.match(/<body[^>]*>/i)
        if (bodyMatch) {
          const insertIndex = bodyMatch.index! + bodyMatch[0].length
          
          // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
          let imageHTML = '<div style="margin: 20px 0; display: flex; flex-wrap: wrap; gap: 15px; justify-content: center;">\n'
          for (let i = 0; i < expectedImageCount; i++) {
            imageHTML += `  <img src="IMAGE_${i}" alt="Image ${i + 1}" style="max-width: 300px; height: auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />\n`
          }
          imageHTML += '</div>\n'
          
          html = html.slice(0, insertIndex) + '\n' + imageHTML + html.slice(insertIndex)
          console.log(`‚úÖ Manually inserted ${expectedImageCount} IMAGE placeholders`)
        }
      }
    }
    
    // ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–ï –∑–∞–º–µ–Ω—è–µ–º placeholders –∑–¥–µ—Å—å!
    // –í—Å—è –ª–æ–≥–∏–∫–∞ –∑–∞–º–µ–Ω—ã IMAGE_X –Ω–∞ base64 –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ imageAgent.ts:replaceImagePlaceholders()
    // –¢–∞–º –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ placeholders –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∏—Ç—ã—Ö IMAGE_*
    
    return html
  } catch (error) {
    console.error('API Error:', error)
    return `<html><body><h1>–û—à–∏–±–∫–∞ API: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</h1></body></html>`
  }
}

const getSystemPrompt = (docType: string): string => {
  const config = PROMPTS[docType as DocType]
  const basePrompt = config?.system || "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextualPrompt = `${basePrompt}

üß† INTELLIGENT CONTEXT UNDERSTANDING:

You are an AI that deeply understands user intent and context. Your task is to:

1. ANALYZE the user's request carefully:
   - What is the main subject/product/company/topic?
   - What style/tone does the user want? (professional, casual, playful, serious, etc.)
   - Are there specific requirements? (colors, structure, specific details, etc.)
   - What is the user's REAL intent behind their words?

2. EXTRACT all relevant information:
   - Company/brand names mentioned
   - Product names and details
   - Specific numbers, dates, prices
   - Context clues (industry, target audience, purpose)

3. GENERATE content that:
   - MATCHES the user's intent perfectly
   - Uses appropriate tone and style for the context
   - Includes all specific details mentioned
   - Is detailed but concise
   - Follows the document type structure

‚ö†Ô∏è CRITICAL RULES:
- If user mentions specific details (names, numbers, colors, etc.) ‚Üí USE THEM
- If user specifies "–æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" or "1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" ‚Üí understand they want 1 image
- If user asks for specific style ‚Üí apply that style
- ALWAYS output valid JSON format
- Extract company names, product names, prices from the request
- Be intelligent: understand context, not just keywords

RESPOND WITH UNDERSTANDING AND PRECISION.`
  
  return contextualPrompt
}

export const getPromptForAction = (
  docType: DocType,
  action: keyof PromptConfig
): string => {
  const config = PROMPTS[docType]
  return config?.[action] || ''
}
