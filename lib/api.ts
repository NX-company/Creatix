import { PROMPTS, type PromptConfig } from './prompts'
import type { DocType } from './store'
import { fetchWithTimeout } from './fetchWithTimeout'
import { API_TIMEOUTS } from './constants'
import { getModernDesignPrompt } from './designPrompts'

export const generateContent = async (prompt: string, docType: string, model: string = "google/gemini-2.5-flash-lite"): Promise<string> => {
  try {
    const systemPrompt = getSystemPrompt(docType)
    
    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: "system", content: systemPrompt + "\n\n–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è." },
          { role: "user", content: prompt }
        ],
        model: model,
        temperature: 0.7
      }),
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('OpenRouter API request failed')
    }

    const data = await response.json()
    let content = data.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    content = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    return content
  } catch (error) {
    console.error('API Error:', error)
    return `–û—à–∏–±–∫–∞ API: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
  }
}

export const generateContentWithImages = async (
  prompt: string,
  docType: string,
  images: Array<{ id: string; name: string; base64: string; type: string }> = [],
  model: string = "google/gemini-2.0-flash-001"
): Promise<string> => {
  try {
    const systemPrompt = getSystemPrompt(docType)
    
    if (images.length === 0) {
      return generateContent(prompt, docType, model)
    }

    console.log(`üîç Multimodal generation with ${images.length} images using ${model}`)

    const content: any[] = [
      {
        type: "text",
        text: prompt
      }
    ]

    images.forEach((img, i) => {
      content.push({
        type: "image_url",
        image_url: {
          url: img.base64
        }
      })
    })

    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: "system", content: systemPrompt + "\n\n–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è." },
          { role: "user", content: content }
        ],
        model: model,
        temperature: 0.7
      }),
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('OpenRouter API request failed')
    }

    const data = await response.json()
    let result = data.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    result = result.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    console.log(`‚úÖ Multimodal generation complete`)
    
    return result
  } catch (error) {
    console.error('Multimodal API Error:', error)
    console.log('‚ö†Ô∏è  Falling back to text-only generation')
    return generateContent(prompt, docType, model)
  }
}

export const generateHTML = async (
  content: string,
  docType: string,
  styleConfig: any,
  uploadedImages: Array<{ id: string; name: string; base64: string; type: string }> = [],
  model: string = "google/gemini-2.5-flash-lite"
): Promise<string> => {
  try {
    console.log(`üèóÔ∏è  HTML Composer: Using model ${model}`)
    console.log(`   Images to include: ${uploadedImages.length}`)
    
    if (uploadedImages.length > 0) {
      uploadedImages.forEach((img, i) => {
        console.log(`      ${i}. ${img.name} (id: ${img.id})`)
      })
    }
    
    // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º base64 –≤ –ø—Ä–æ–º–ø—Ç - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const imagesInfo = uploadedImages.length > 0
      ? `\n\nüì∏ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (${uploadedImages.length} —à—Ç):
${uploadedImages.map((img, i) => `${i + 1}. "${img.name}" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π placeholder IMAGE_${i}`).join('\n')}

üéØ –ü–†–ê–í–ò–õ–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4, IMAGE_5... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)!

–î–ª—è –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (proposal):
- IMAGE_0: –õ–û–ì–û–¢–ò–ü –ö–û–ú–ü–ê–ù–ò–ò –≤ —à–∞–ø–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, max-width: 180px)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ: –≥–ª–∞–≤–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ–º–∞–Ω–¥–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3...)

–î–ª—è –°–ß–Å–¢–ê (invoice):
- IMAGE_0: –õ–û–ì–û–¢–ò–ü –ö–û–ú–ü–ê–ù–ò–ò –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—á—ë—Ç–∞ (—Å–ø—Ä–∞–≤–∞ –≤ —à–∞–ø–∫–µ, max-width: 150px)
- IMAGE_1+: –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–û–í–ê–†–û–í/–£–°–õ–£–ì - —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∑–∏—Ü–∏–π —Ä—è–¥–æ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ (max-width: 80px, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ)
- –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫—Ä—É–≥—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
- –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ —á–µ–º —Ç–æ–≤–∞—Ä–æ–≤ - –≤—Å—Ç–∞–≤—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –ü–ò–°–¨–ú–ê (email):
- IMAGE_0: –õ–æ–≥–æ—Ç–∏–ø –≤ —à–∞–ø–∫–µ –ø–∏—Å—å–º–∞ (—Å–ª–µ–≤–∞ –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, max-width: 160px)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Å—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞ –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, —á–µ—Ä–µ–¥—É–π —Å —Ç–µ–∫—Å—Ç–æ–º
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3...)

–î–ª—è –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò (presentation):
- IMAGE_0: –ù–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–º —Å–ª–∞–π–¥–µ (–∫–∞–∫ –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ, max-width: 300px)
- IMAGE_1+: –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–ª–∞–π–¥–∞–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (–Ω–∞ –∫–∞–∂–¥–æ–º —Å–ª–∞–π–¥–µ –º–∞–∫—Å–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
- –°–æ–∑–¥–∞–π —Å—Ç–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –õ–û–ì–û–¢–ò–ü–ê (logo):
- –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–∞
- –ü–æ–∫–∞–∂–∏ –∏—Ö –≤ —Å–µ—Ç–∫–µ (2-3 –∫–æ–ª–æ–Ω–∫–∏) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
- –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (max-width: 300px)
- –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ (5+) - —Å–¥–µ–ª–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ—Ç–∫—É
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–ê (product-card):
- IMAGE_0: –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–±–æ–ª—å—à–æ–µ, max-width: 100%, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ—é –ø–æ–¥ –≥–ª–∞–≤–Ω—ã–º —Ñ–æ—Ç–æ (max-width: 48% –¥–ª—è –∫–∞–∂–¥–æ–≥–æ, —Å–µ—Ç–∫–∞ 2 –∫–æ–ª–æ–Ω–∫–∏)
- –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–Ω–æ–≥–æ - —Å–¥–µ–ª–∞–π –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –≥–∞–ª–µ—Ä–µ—é
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

üìù –ö–ê–ö –í–°–¢–ê–í–õ–Ø–¢–¨:
<img src="IMAGE_0" alt="${uploadedImages[0]?.name || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}" style="max-width: 200px; height: auto;" />

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –í–°–¢–ê–í–õ–Ø–ô base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã IMAGE_0, IMAGE_1, IMAGE_2 –∏ —Ç.–¥.
- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º: <img src="IMAGE_0" ... /> –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ data:image
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –†–∞–∑–º–µ—â–∞–π –∏—Ö –ª–æ–≥–∏—á–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –î–æ–±–∞–≤–ª—è–π CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (border-radius, box-shadow, etc.)
- –î–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤: max-width 150-200px, –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π: max-width 100%`
      : ''
    
    const modernDesign = getModernDesignPrompt(docType)
    
    const prompt = `
–°–æ–∑–¥–∞–π –°–û–í–†–ï–ú–ï–ù–ù–´–ô HTML –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
${content}

–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docType}
–°—Ç–∏–ª—å: ${JSON.stringify(styleConfig)}${imagesInfo}

${modernDesign}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–ª–Ω—ã–π HTML —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ CSS —Å—Ç–∏–ª—è–º–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –°–û–í–†–ï–ú–ï–ù–ù–´–ô –¥–∏–∑–∞–π–Ω 2025 (–Ω–µ –∫–∞–∫ –≥–∞–∑–µ—Ç–∞!)
- –ò—Å–ø–æ–ª—å–∑—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —à—Ä–∏—Ñ—Ç
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ä–∞–∑–º–µ—Å—Ç–∏ –∏—Ö –õ–û–ì–ò–ß–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ
`

    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: "system", content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é HTML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π HTML —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ CSS —Å—Ç–∏–ª—è–º–∏. –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã IMAGE_0, IMAGE_1 –∏ —Ç.–¥." },
          { role: "user", content: prompt }
        ],
        model: model,
        temperature: 0.7
      }),
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('HTML generation failed')
    }

    const data = await response.json()
    let html = data.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML"
    
    // –£–±–∏—Ä–∞–µ–º markdown –æ–±–µ—Ä—Ç–∫–∏
    html = html.replace(/```html\n?/gi, '')
    html = html.replace(/```\n?/g, '')
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç "html" –≤ –Ω–∞—á–∞–ª–µ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    html = html.replace(/^html\s*/i, '')
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ
    html = html.trim()
    
    // –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω—è–µ–º placeholder'—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ base64
    uploadedImages.forEach((img, i) => {
      const placeholder = `IMAGE_${i}`
      html = html.replace(new RegExp(placeholder, 'g'), img.base64)
    })
    
    return html
  } catch (error) {
    console.error('API Error:', error)
    return `<html><body><h1>–û—à–∏–±–∫–∞ API: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</h1></body></html>`
  }
}

const getSystemPrompt = (docType: string): string => {
  const config = PROMPTS[docType as DocType]
  return config?.system || "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
}

export const getPromptForAction = (
  docType: DocType,
  action: keyof PromptConfig
): string => {
  const config = PROMPTS[docType]
  return config?.[action] || ''
}
