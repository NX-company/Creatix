import type { DocType, UploadedImage } from './store'
import { getModernDesignPrompt } from './designPrompts'

export async function generateContentWithGPT4o(
  prompt: string,
  docType: DocType,
  uploadedImages: UploadedImage[] = []
): Promise<string> {
  console.log(`ü§ñ GPT-4o (OpenAI): Generating content for ${docType}...`)
  
  if (uploadedImages.length > 0) {
    console.log(`üì∏ GPT-4o: Analyzing ${uploadedImages.length} uploaded images...`)
  }

  try {
    const response = await fetch('/api/openai-gpt4o', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        docType,
        images: uploadedImages,
        mode: 'content'
      }),
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.details || error.error || 'GPT-4o generation failed')
    }

    const data = await response.json()
    console.log(`‚úÖ GPT-4o (OpenAI): Generated ${data.content.length} characters`)
    
    return data.content
  } catch (error) {
    console.error('‚ùå GPT-4o error:', error)
    throw new Error(`GPT-4o generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

export async function generateHTMLWithGPT4o(
  content: string,
  docType: DocType,
  styleConfig: any,
  uploadedImages: UploadedImage[],
  generatedImages: Array<{ slot: number; dataUrl: string; prompt: string }> = []
): Promise<string> {
  console.log(`üèóÔ∏è  GPT-4o (OpenAI): Composing HTML for ${docType}...`)
  console.log(`   üì∏ ${uploadedImages.length} uploaded images`)
  console.log(`   üé® ${generatedImages.length} AI generated images`)
  
  let imageInstructions = ''
  if (generatedImages.length > 0) {
    imageInstructions = `\n\nüé® AI GENERATED IMAGES (${generatedImages.length} —à—Ç):
${generatedImages.map((img) => 
  `${img.slot + 1}. "${img.prompt.substring(0, 60)}..." ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π placeholder IMAGE_${img.slot}`
).join('\n')}

üéØ –ü–†–ê–í–ò–õ–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4, IMAGE_5... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)!

–î–ª—è –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (proposal):
- IMAGE_0: –õ–û–ì–û–¢–ò–ü –ö–û–ú–ü–ê–ù–ò–ò –≤ —à–∞–ø–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, max-width: 180px)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ: –≥–ª–∞–≤–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ–º–∞–Ω–¥–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3...)

–î–ª—è –°–ß–Å–¢–ê (invoice):
- IMAGE_0: –õ–û–ì–û–¢–ò–ü –ö–û–ú–ü–ê–ù–ò–ò –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—á—ë—Ç–∞ (—Å–ø—Ä–∞–≤–∞ –≤ —à–∞–ø–∫–µ, max-width: 150px)
- IMAGE_1+: –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–û–í–ê–†–û–í/–£–°–õ–£–ì - —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∑–∏—Ü–∏–π —Ä—è–¥–æ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ (max-width: 80px, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ)
- –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫—Ä—É–≥—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
- –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ —á–µ–º —Ç–æ–≤–∞—Ä–æ–≤ - –≤—Å—Ç–∞–≤—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –ü–ò–°–¨–ú–ê (email):
- IMAGE_0: –õ–æ–≥–æ—Ç–∏–ø –≤ —à–∞–ø–∫–µ –ø–∏—Å—å–º–∞ (—Å–ª–µ–≤–∞ –∏–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, max-width: 160px)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Å—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞ –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, —á–µ—Ä–µ–¥—É–π —Å —Ç–µ–∫—Å—Ç–æ–º
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3...)

–î–ª—è –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò (presentation):
- IMAGE_0: –ù–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–º —Å–ª–∞–π–¥–µ (–∫–∞–∫ –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ, max-width: 300px)
- IMAGE_1+: –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–ª–∞–π–¥–∞–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (–Ω–∞ –∫–∞–∂–¥–æ–º —Å–ª–∞–π–¥–µ –º–∞–∫—Å–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
- –°–æ–∑–¥–∞–π —Å—Ç–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –õ–û–ì–û–¢–ò–ü–ê (logo):
- –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–∞
- –ü–æ–∫–∞–∂–∏ –∏—Ö –≤ —Å–µ—Ç–∫–µ (2-3 –∫–æ–ª–æ–Ω–∫–∏) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
- –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (max-width: 300px)
- –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ (5+) - —Å–¥–µ–ª–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ—Ç–∫—É
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

–î–ª—è –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–ê (product-card):
- IMAGE_0: –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–±–æ–ª—å—à–æ–µ, max-width: 100%, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
- IMAGE_1+: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ—é –ø–æ–¥ –≥–ª–∞–≤–Ω—ã–º —Ñ–æ—Ç–æ (max-width: 48% –¥–ª—è –∫–∞–∂–¥–æ–≥–æ, —Å–µ—Ç–∫–∞ 2 –∫–æ–ª–æ–Ω–∫–∏)
- –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–Ω–æ–≥–æ - —Å–¥–µ–ª–∞–π –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –≥–∞–ª–µ—Ä–µ—é
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_0, IMAGE_1, IMAGE_2, IMAGE_3, IMAGE_4...)

üìù –ö–ê–ö –í–°–¢–ê–í–õ–Ø–¢–¨:
<img src="IMAGE_0" alt="–æ–ø–∏—Å–∞–Ω–∏–µ" style="max-width: 200px; height: auto;" />

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –í–°–¢–ê–í–õ–Ø–ô base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã IMAGE_0, IMAGE_1, IMAGE_2 –∏ —Ç.–¥.
- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º: <img src="IMAGE_0" ... /> –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ data:image
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ
- –î–æ–±–∞–≤–ª—è–π CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (border-radius, box-shadow, etc.)
- –î–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤: max-width 150-200px, –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π: max-width 100%`
  }
  
  const modernDesign = getModernDesignPrompt(docType)
  
  const prompt = `–°–æ–∑–¥–∞–π –°–û–í–†–ï–ú–ï–ù–ù–´–ô HTML –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
${content}

–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docType}
–°—Ç–∏–ª—å: ${JSON.stringify(styleConfig)}${imageInstructions}

${modernDesign}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–ª–Ω—ã–π HTML —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ CSS —Å—Ç–∏–ª—è–º–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –°–û–í–†–ï–ú–ï–ù–ù–´–ô –¥–∏–∑–∞–π–Ω 2025 (–Ω–µ –∫–∞–∫ –≥–∞–∑–µ—Ç–∞!)
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ä–∞–∑–º–µ—Å—Ç–∏ –∏—Ö –õ–û–ì–ò–ß–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞`

  try {
    const response = await fetch('/api/openai-gpt4o', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        docType,
        images: uploadedImages,
        mode: 'html'
      }),
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.details || error.error || 'GPT-4o HTML generation failed')
    }

    const data = await response.json()
    let html = data.content
    
    // –£–±–∏—Ä–∞–µ–º markdown –æ–±–µ—Ä—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    html = html.replace(/```html\n?/gi, '').replace(/```\n?/g, '').trim()
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ </html>
    const htmlEndIndex = html.lastIndexOf('</html>')
    if (htmlEndIndex !== -1) {
      html = html.substring(0, htmlEndIndex + 7) // +7 –¥–ª—è '</html>'
    }
    
    // –£–±–∏—Ä–∞–µ–º –í–°–ï title –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –í–°–ï–• —Ç–µ–≥–æ–≤ (–≤—ã–∑—ã–≤–∞—é—Ç tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
    html = html.replace(/\s+title="[^"]*"/gi, '')
    html = html.replace(/\s+title='[^']*'/gi, '')
    
    console.log(`‚úÖ GPT-4o (OpenAI): Generated HTML (${html.length} characters)`)
    
    return html
  } catch (error) {
    console.error('‚ùå GPT-4o HTML generation error:', error)
    throw new Error(`GPT-4o HTML generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

export async function analyzeVideoWithGPT4o(
  videoBase64: string,
  prompt: string
): Promise<string> {
  console.log(`üé• GPT-4o (OpenAI): Analyzing video...`)
  
  try {
    const response = await fetch('/api/openai-gpt4o', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: `Analyze this video and extract key information: ${prompt}`,
        docType: 'presentation',
        images: [{ base64: videoBase64, type: 'video' }],
        mode: 'content'
      }),
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.details || error.error || 'GPT-4o video analysis failed')
    }

    const data = await response.json()
    console.log(`‚úÖ GPT-4o (OpenAI): Video analyzed (${data.content.length} characters)`)
    
    return data.content
  } catch (error) {
    console.error('‚ùå GPT-4o video analysis error:', error)
    throw new Error(`GPT-4o video analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

