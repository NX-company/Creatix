/**
 * –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è guestTracking —É—Ç–∏–ª–∏—Ç
 * –ó–∞–ø—É—Å–∫: node -r tsx lib/__tests__/guestTracking.test.ts
 */

import {
  canGuestGenerate,
  trackGuestGeneration,
  getGuestStats,
  initializeGuest,
  isGuestExpired,
  type GuestUsage
} from '../guestTracking'

console.log('üß™ Testing Guest Tracking Utilities...\n')

// –¢–µ—Å—Ç 1: –ù–æ–≤—ã–π –≥–æ—Å—Ç—å –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
console.log('Test 1: New guest can generate')
const result1 = canGuestGenerate(null)
console.log('‚úÖ Result:', result1)
console.assert(result1.canGenerate === true, 'New guest should be able to generate')
console.assert(result1.mode === 'ADVANCED', 'First generation should be ADVANCED')
console.assert(result1.remaining.total === 4, 'Should have 4 total generations')
console.log('')

// –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Å—Ç—è
console.log('Test 2: Initialize guest')
const mockRequest = {
  headers: new Map([
    ['user-agent', 'test-agent'],
    ['x-forwarded-for', '192.168.1.1']
  ])
} as any
const newGuest = initializeGuest(mockRequest)
console.log('‚úÖ Result:', newGuest)
console.assert(newGuest.advancedUsed === false, 'New guest should not have used ADVANCED')
console.assert(newGuest.freeUsed === 0, 'New guest should have 0 FREE used')
console.assert(newGuest.totalUsed === 0, 'New guest should have 0 total used')
console.log('')

// –¢–µ—Å—Ç 3: –¢—Ä–µ–∫–∏–Ω–≥ ADVANCED –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
console.log('Test 3: Track ADVANCED generation')
const usage1 = trackGuestGeneration(newGuest, 'ADVANCED')
console.log('‚úÖ Result:', usage1)
console.assert(usage1.advancedUsed === true, 'Should mark ADVANCED as used')
console.assert(usage1.totalUsed === 1, 'Should have 1 total used')
console.log('')

// –¢–µ—Å—Ç 4: –ü–æ—Å–ª–µ ADVANCED - —Ç–æ–ª—å–∫–æ FREE –¥–æ—Å—Ç—É–ø–µ–Ω
console.log('Test 4: After ADVANCED, only FREE available')
const result2 = canGuestGenerate(usage1)
console.log('‚úÖ Result:', result2)
console.assert(result2.canGenerate === true, 'Should still be able to generate')
console.assert(result2.mode === 'FREE', 'Next generation should be FREE')
console.assert(result2.remaining.advanced === 0, 'No ADVANCED remaining')
console.assert(result2.remaining.free === 3, 'Should have 3 FREE remaining')
console.log('')

// –¢–µ—Å—Ç 5: –¢—Ä–µ–∫–∏–Ω–≥ FREE –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
console.log('Test 5: Track FREE generations')
let currentUsage = usage1
for (let i = 1; i <= 3; i++) {
  currentUsage = trackGuestGeneration(currentUsage, 'FREE')
  console.log(`  FREE generation ${i}:`, currentUsage)
  console.assert(currentUsage.freeUsed === i, `Should have ${i} FREE used`)
  console.assert(currentUsage.totalUsed === i + 1, `Should have ${i + 1} total used`)
}
console.log('')

// –¢–µ—Å—Ç 6: –ü–æ—Å–ª–µ 4 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
console.log('Test 6: After 4 generations, blocked')
const result3 = canGuestGenerate(currentUsage)
console.log('‚úÖ Result:', result3)
console.assert(result3.canGenerate === false, 'Should NOT be able to generate')
console.assert(result3.mode === null, 'Mode should be null')
console.assert(result3.remaining.total === 0, 'No generations remaining')
console.assert(result3.reason !== undefined, 'Should have a reason message')
console.log('')

// –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ—Å—Ç—è
console.log('Test 7: Guest stats')
const stats = getGuestStats(currentUsage)
console.log('‚úÖ Result:', stats)
console.assert(stats.isGuest === true, 'Should be guest')
console.assert(stats.totalRemaining === 0, 'No remaining')
console.assert(stats.message.includes('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã'), 'Message should indicate all used')
console.log('')

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
console.log('Test 8: Check expiration')
const oldGuest: GuestUsage = {
  ...newGuest,
  firstVisit: new Date(Date.now() - 31 * 24 * 60 * 60 * 1000).toISOString(), // 31 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
}
const expired = isGuestExpired(oldGuest)
console.log('‚úÖ Result:', expired)
console.assert(expired === true, 'Guest should be expired after 30 days')

const recentGuest: GuestUsage = {
  ...newGuest,
  firstVisit: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
}
const notExpired = isGuestExpired(recentGuest)
console.log('‚úÖ Result:', notExpired)
console.assert(notExpired === false, 'Guest should not be expired within 30 days')
console.log('')

console.log('‚úÖ‚úÖ‚úÖ All tests passed! ‚úÖ‚úÖ‚úÖ')
