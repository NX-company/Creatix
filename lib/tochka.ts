/**
 * –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/
 */

// ============================================
// –¢–ò–ü–´ –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ù–´–• –°–°–´–õ–û–ö
// ============================================

export interface TochkaPaymentParams {
  amount: number // –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
  customerCode?: string // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
  purpose: string // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  paymentMode: ('card' | 'tinkoff' | 'sbp')[] // –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
  redirectUrl: string // URL –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
  failRedirectUrl: string // URL –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
  saveCard?: boolean // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É
  consumerId?: string // ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  ttl?: number // –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (1-44640, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10080)
}

export interface TochkaPaymentWithReceiptParams extends TochkaPaymentParams {
  client: {
    email: string // Email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞
  }
  items: Array<{
    name: string // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
    amount: number // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    quantity: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }>
}

export interface TochkaPaymentResponse {
  paymentId: string
  paymentUrl: string
  status: string
  expiresAt: string
}

export interface TochkaPaymentInfo {
  operationId: string
  status: string
  amount: number
  currency: string
  purpose: string
  paymentMode: string[]
  createdAt: string
  expiresAt: string
  consumerId?: string
}

export interface TochkaPaymentListParams {
  from?: string // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (ISO 8601)
  to?: string // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (ISO 8601)
  status?: string // –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  limit?: number // –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
  offset?: number // –°–º–µ—â–µ–Ω–∏–µ
}

export interface TochkaRefundParams {
  amount?: number // –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç)
  reason?: string // –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
}

export interface TochkaWebhookPayload {
  paymentId: string
  status: 'SUCCESS' | 'FAILED' | 'PENDING'
  amount: number
  customerCode: string
  consumerId?: string
  paymentDate?: string
}

// ============================================
// –¢–ò–ü–´ –î–õ–Ø QR-–ö–û–î–û–í –°–ë–ü
// ============================================

export interface TochkaQRCodeParams {
  accountId: string // ID —Å—á–µ—Ç–∞
  merchantId: string // ID –º–µ—Ä—á–∞–Ω—Ç–∞ (–¢–°–ü)
  currency?: string // –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
  amount?: number // –°—É–º–º–∞ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö QR-–∫–æ–¥–æ–≤)
  paymentPurpose?: string // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  qrcType?: 'QRDynamic' | 'QRStatic' // –¢–∏–ø QR-–∫–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é QRDynamic)
  imageFormat?: 'image/png' | 'image/svg+xml' // –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  mediaType?: 'image/png' | 'image/svg+xml' // –¢–∏–ø –º–µ–¥–∏–∞
  width?: number // –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
  height?: number // –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
  sourceQRCode?: string // –ò—Å—Ö–æ–¥–Ω—ã–π QR-–∫–æ–¥
}

export interface TochkaQRCodeResponse {
  qrcId: string // ID QR-–∫–æ–¥–∞ –≤ –°–ë–ü
  payload: string // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ QR-–∫–æ–¥–∞
  qrcType: 'QRDynamic' | 'QRStatic'
  status: 'Active' | 'Inactive'
  image?: {
    width: number
    height: number
    mediaType: string
    content: string // Base64
  }
  createdAt: string
  currency?: string
  amount?: number
  paymentPurpose?: string
}

export interface TochkaQRCodePaymentStatus {
  qrcId: string
  code: string // –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
  status: string // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  message?: string // –°–æ–æ–±—â–µ–Ω–∏–µ
  trxId?: string // ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
}

// ============================================
// –¢–ò–ü–´ –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
// ============================================

export interface TochkaCustomer {
  customerCode: string
  customerType: 'Business' | 'Individual'
  name: string
  inn?: string
  kpp?: string
  accounts?: Array<{
    accountNumber: string
    currency: string
    balance?: number
  }>
}

export interface TochkaRetailerInfo {
  merchantId: string
  status: string
  isActive: boolean
  name?: string
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞
 */
export class TochkaClient {
  private baseUrl: string
  private jwtToken: string
  private clientId: string
  private clientSecret: string
  private redirectUrl: string
  private customerCode: string
  private apiVersion: string
  private accessToken: string | null = null

  constructor(apiVersion: string = 'v1.0') {
    this.baseUrl = process.env.TOCHKA_API_URL || 'https://enter.tochka.com'
    this.jwtToken = process.env.TOCHKA_JWT_TOKEN || ''
    this.clientId = process.env.TOCHKA_CLIENT_ID || ''
    this.clientSecret = process.env.TOCHKA_CLIENT_SECRET || ''
    this.redirectUrl = process.env.TOCHKA_REDIRECT_URL || ''
    this.customerCode = process.env.TOCHKA_CUSTOMER_CODE || ''
    this.apiVersion = apiVersion

    if (!this.clientId || !this.clientSecret) {
      console.warn('‚ö†Ô∏è  Tochka Bank OAuth credentials not configured')
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å OAuth 2.0 —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é Client Credentials flow
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/authorization
   */
  async getOAuthToken(): Promise<string> {
    if (this.accessToken) {
      return this.accessToken
    }

    console.log('üîê Getting OAuth 2.0 access token...')

    const tokenUrl = `${this.baseUrl}/connect/token`

    const params = new URLSearchParams({
      grant_type: 'client_credentials',
      client_id: this.clientId,
      client_secret: this.clientSecret,
    })

    try {
      const response = await fetch(tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: params.toString(),
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå OAuth token error:', errorText)
        throw new Error(`Failed to get OAuth token: ${response.status} ${response.statusText}`)
      }

      const data = await response.json()
      this.accessToken = data.access_token

      console.log('‚úÖ OAuth token obtained successfully')

      // –ï—Å–ª–∏ –µ—Å—Ç—å expires_in, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (data.expires_in) {
        console.log(`   Token expires in ${data.expires_in} seconds`)
      }

      return this.accessToken!
    } catch (error) {
      console.error('‚ùå Failed to get OAuth token:', error)
      throw error
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∫ API endpoint
   * –§–æ—Ä–º–∞—Ç: /uapi/{service}/{apiVersion}/{path}
   * –ù–∞–ø—Ä–∏–º–µ—Ä: /uapi/acquiring/v1/payments
   */
  private buildPath(service: string, path: string): string {
    // –¢–æ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç /uapi/{service}/{apiVersion}/{path}
    return `/uapi/${service}/${this.apiVersion}/${path}`
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
   */
  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    // –ü–æ–ª—É—á–∏—Ç—å OAuth —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
    let token = this.accessToken
    if (!token) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ OAuth –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
      token = this.jwtToken
      if (!token) {
        // –ï—Å–ª–∏ –Ω–µ—Ç JWT, –ø–æ–ª—É—á–∞–µ–º OAuth —Ç–æ–∫–µ–Ω
        token = await this.getOAuthToken()
      }
    }

    const url = `${this.baseUrl}${endpoint}`

    const response = await fetch(url, {
      ...options,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...options.headers,
      },
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`‚ùå Tochka API Error [${response.status}]:`, errorText)

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –∏ —É –Ω–∞—Å –±—ã–ª OAuth —Ç–æ–∫–µ–Ω, —Å–±—Ä–æ—Å–∏–º –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π
      if (response.status === 401 && this.accessToken) {
        console.log('üîÑ Access token expired, refreshing...')
        this.accessToken = null
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        return this.request<T>(endpoint, options)
      }

      throw new Error(`Tochka API Error: ${response.status} ${response.statusText} - ${errorText}`)
    }

    return response.json()
  }

  // ============================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–õ–ò–ï–ù–¢–ê–ú–ò
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è customerCode
   * –ú–µ—Ç–æ–¥: GET /open_banking/{apiVersion}/customers
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-customers-list-open-banking-api-version-customers-get
   */
  async getCustomersList(): Promise<{ customers: TochkaCustomer[] }> {
    console.log('üîç Getting customers list from Tochka API...')
    return this.request<{ customers: TochkaCustomer[] }>(
      this.buildPath('open_banking', 'customers')
    )
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
   * –ú–µ—Ç–æ–¥: GET /open_banking/{apiVersion}/customers/{customerCode}
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-customer-info-open-banking-api-version-customers-customer-code-get
   */
  async getCustomerInfo(customerCode?: string): Promise<TochkaCustomer> {
    const code = customerCode || this.customerCode
    console.log(`üîç Getting customer info for ${code}...`)
    return this.request<TochkaCustomer>(
      this.buildPath('open_banking', `customers/${code}`)
    )
  }

  // ============================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –≠–ö–í–ê–ô–†–ò–ù–ì–û–ú
  // ============================================

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
   * –ú–µ—Ç–æ–¥: GET /acquiring/{apiVersion}/retailers
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-retailers-acquiring-api-version-retailers-get
   * –°—Ç–∞—Ç—É—Å REG –∏ isActive: true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç–∫–≤–∞–π—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
   */
  async getRetailers(): Promise<any> {
    console.log('üîç Checking acquiring status...')
    const response = await this.request<any>(
      this.buildPath('acquiring', `retailers?customerCode=${this.customerCode}`)
    )
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { Data: { Retailer: [...] }, Links: {...}, Meta: {...} }
    return response
  }

  // ============================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–¢–ï–ñ–ù–´–ú–ò –°–°–´–õ–ö–ê–ú–ò
  // ============================================

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É
   * –ú–µ—Ç–æ–¥: POST /acquiring/{apiVersion}/payments
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/create-payment-operation-acquiring-api-version-payments-post
   */
  async createPayment(params: TochkaPaymentParams): Promise<any> {
    // –§–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: { Data: { ... } }
    const payload = {
      Data: {
        customerCode: params.customerCode || this.customerCode,
        amount: params.amount.toString(), // API —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É
        purpose: params.purpose,
        redirectUrl: params.redirectUrl,
        failRedirectUrl: params.failRedirectUrl,
        paymentMode: params.paymentMode || ['card', 'sbp'],
        saveCard: params.saveCard || false,
        consumerId: params.consumerId,
        ttl: params.ttl || 10080,
      }
    }

    console.log('üè¶ Creating Tochka payment:', {
      amount: payload.Data.amount,
      purpose: payload.Data.purpose,
      paymentMode: payload.Data.paymentMode,
      ttl: payload.Data.ttl,
    })

    const result = await this.request<any>(
      this.buildPath('acquiring', 'payments'),
      {
        method: 'POST',
        body: JSON.stringify(payload),
      }
    )

    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { Data: { paymentLink, operationId, status, ... }, Links: {...}, Meta: {...} }
    if (result.Data?.paymentLink) {
      console.log('‚úÖ Payment link created:', result.Data.paymentLink)
      console.log('   Operation ID:', result.Data.operationId)
      console.log('   Status:', result.Data.status)
    }

    return result
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–µ–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
   * –ú–µ—Ç–æ–¥: POST /acquiring/{apiVersion}/payments_with_receipt
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/create-payment-operation-with-receipt-acquiring-api-version-payments-with-receipt-post
   */
  async createPaymentWithReceipt(
    params: TochkaPaymentWithReceiptParams
  ): Promise<any> {
    // –§–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: { Data: { ... } }
    const payload = {
      Data: {
        amount: params.amount.toString(), // API —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É
        customerCode: params.customerCode || this.customerCode,
        purpose: params.purpose,
        paymentMode: params.paymentMode || ['card', 'sbp'],
        redirectUrl: params.redirectUrl,
        failRedirectUrl: params.failRedirectUrl,
        saveCard: params.saveCard || false,
        consumerId: params.consumerId,
        ttl: params.ttl || 10080,
        Client: params.client, // –ó–∞–≥–ª–∞–≤–Ω–∞—è C —Å–æ–≥–ª–∞—Å–Ω–æ API
        Items: params.items,   // –ó–∞–≥–ª–∞–≤–Ω–∞—è I —Å–æ–≥–ª–∞—Å–Ω–æ API
      }
    }

    console.log('üè¶ Creating payment with receipt:', {
      amount: payload.Data.amount,
      purpose: payload.Data.purpose,
      email: params.client.email,
      items: params.items.length,
    })

    const result = await this.request<any>(
      this.buildPath('acquiring', 'payments_with_receipt'), // payments_with_receipt, –ù–ï payments/with_receipt
      {
        method: 'POST',
        body: JSON.stringify(payload),
      }
    )

    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { Data: { paymentLink, operationId, ... }, Links: {...}, Meta: {...} }
    if (result.Data?.paymentLink) {
      console.log('‚úÖ Payment link created:', result.Data.paymentLink)
    }

    return result
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
   * –ú–µ—Ç–æ–¥: GET /acquiring/{apiVersion}/payments
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-payment-operation-list-acquiring-api-version-payments-get
   */
  async getPaymentList(params?: TochkaPaymentListParams): Promise<any> {
    const queryParams = new URLSearchParams()
    if (params?.from) queryParams.append('from', params.from)
    if (params?.to) queryParams.append('to', params.to)
    if (params?.status) queryParams.append('status', params.status)
    if (params?.limit) queryParams.append('limit', params.limit.toString())
    if (params?.offset) queryParams.append('offset', params.offset.toString())

    const query = queryParams.toString()
    const endpoint = `${this.buildPath('acquiring', 'payments')}${query ? `?${query}` : ''}`

    console.log('üîç Getting payment list...')
    return this.request(endpoint)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
   * –ú–µ—Ç–æ–¥: GET /acquiring/{apiVersion}/payments/{operationId}
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-payment-operation-info-acquiring-api-version-payments-operation-id-get
   */
  async getPaymentInfo(operationId: string): Promise<TochkaPaymentInfo> {
    console.log(`üîç Getting payment info for ${operationId}...`)
    return this.request<TochkaPaymentInfo>(
      this.buildPath('acquiring', `payments/${operationId}`)
    )
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –ø–ª–∞—Ç–µ–∂—É
   * –ú–µ—Ç–æ–¥: POST /acquiring/{apiVersion}/payments/{operationId}/refund
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/refund-payment-operation-acquiring-api-version-payments-operation-id-refund-post
   */
  async refundPayment(operationId: string, params?: TochkaRefundParams): Promise<any> {
    const payload = {
      amount: params?.amount,
      reason: params?.reason || '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
    }

    console.log(`üí∏ Refunding payment ${operationId}:`, payload)

    return this.request(
      this.buildPath('acquiring', `payments/${operationId}/refund`),
      {
        method: 'POST',
        body: JSON.stringify(payload),
      }
    )
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (capture)
   * –ú–µ—Ç–æ–¥: POST /acquiring/{apiVersion}/payments/{operationId}/capture
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/capture-payment-acquiring-api-version-payments-operation-id-capture-post
   */
  async capturePayment(operationId: string, amount?: number): Promise<any> {
    const payload = amount ? { amount } : {}

    console.log(`‚úÖ Capturing payment ${operationId}:`, payload)

    return this.request(
      this.buildPath('acquiring', `payments/${operationId}/capture`),
      {
        method: 'POST',
        body: JSON.stringify(payload),
      }
    )
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π
   * –ú–µ—Ç–æ–¥: GET /acquiring/{apiVersion}/registry
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-payment-registry-acquiring-api-version-registry-get
   */
  async getPaymentRegistry(from?: string, to?: string): Promise<any> {
    const queryParams = new URLSearchParams()
    if (from) queryParams.append('from', from)
    if (to) queryParams.append('to', to)

    const query = queryParams.toString()
    const endpoint = `${this.buildPath('acquiring', 'registry')}${query ? `?${query}` : ''}`

    console.log('üìä Getting payment registry...')
    return this.request(endpoint)
  }

  // ============================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° QR-–ö–û–î–ê–ú–ò –°–ë–ü
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ QR-–∫–æ–¥–æ–≤
   * –ú–µ—Ç–æ–¥: GET /sbp/{apiVersion}/qr-code/legal-entity/{legalId}
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-qr-codes-list-sbp-api-version-qr-code-legal-entity-legal-id-get
   */
  async getQRCodesList(legalId: string): Promise<{ qrcodeList: TochkaQRCodeResponse[] }> {
    console.log(`üîç Getting QR codes list for legal entity ${legalId}...`)
    return this.request<{ qrcodeList: TochkaQRCodeResponse[] }>(
      this.buildPath('sbp', `qr-code/legal-entity/${legalId}`)
    )
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º QR-–∫–æ–¥–µ
   * –ú–µ—Ç–æ–¥: GET /sbp/{apiVersion}/qr-code/{qrcId}
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-qr-code-sbp-api-version-qr-code-qrc-id-get
   */
  async getQRCode(qrcId: string): Promise<TochkaQRCodeResponse> {
    console.log(`üîç Getting QR code ${qrcId}...`)
    return this.request<TochkaQRCodeResponse>(
      this.buildPath('sbp', `qr-code/${qrcId}`)
    )
  }

  /**
   * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥ –≤ –°–ë–ü
   * –ú–µ—Ç–æ–¥: POST /sbp/{apiVersion}/qr-code/merchant/{merchantId}/account/{accountId}
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/register-qr-code-sbp-api-version-qr-code-merchant-merchant-id-account-id-post
   */
  async registerQRCode(
    merchantId: string,
    accountId: string,
    params: Partial<TochkaQRCodeParams>
  ): Promise<TochkaQRCodeResponse> {
    const payload = {
      currency: params.currency || 'RUB',
      amount: params.amount,
      paymentPurpose: params.paymentPurpose || '–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á–µ—Ç—É',
      qrcType: params.qrcType || 'QRDynamic',
      imageFormat: params.imageFormat || 'image/png',
      mediaType: params.mediaType || 'image/png',
      width: params.width || 0,
      height: params.height || 0,
      sourceQRCode: params.sourceQRCode,
    }

    console.log(`üì± Registering QR code for merchant ${merchantId}, account ${accountId}:`, {
      qrcType: payload.qrcType,
      amount: payload.amount,
    })

    return this.request<TochkaQRCodeResponse>(
      this.buildPath('sbp', `qr-code/merchant/${merchantId}/account/${accountId}`),
      {
        method: 'POST',
        body: JSON.stringify(payload),
      }
    )
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º QR-–∫–æ–¥–∞–º
   * –ú–µ—Ç–æ–¥: GET /sbp/{apiVersion}/qr-codes/{qrc_ids}/payment-status
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.tochka.com/docs/tochka-api/api/get-qr-codes-payment-status-sbp-api-version-qr-codes-qrc-ids-payment-status-get
   */
  async getQRCodesPaymentStatus(qrcIds: string[]): Promise<{ paymentList: TochkaQRCodePaymentStatus[] }> {
    const qrcIdsString = qrcIds.join(',')
    console.log(`üîç Getting payment status for QR codes: ${qrcIdsString}`)

    return this.request<{ paymentList: TochkaQRCodePaymentStatus[] }>(
      this.buildPath('sbp', `qr-codes/${qrcIdsString}/payment-status`)
    )
  }

  // ============================================
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–∞–ª–∏–∞—Å –¥–ª—è getPaymentInfo)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getPaymentInfo –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
   */
  async getPaymentStatus(paymentId: string): Promise<any> {
    return this.getPaymentInfo(paymentId)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å webhook'–∞ –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HMAC-SHA256 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ webhook
   */
  verifyWebhookSignature(payload: string, signature: string): boolean {
    const webhookSecret = process.env.TOCHKA_WEBHOOK_SECRET || ''

    if (!webhookSecret) {
      console.warn('‚ö†Ô∏è  Webhook secret not configured')
      return false
    }

    if (!signature) {
      console.warn('‚ö†Ô∏è  No signature provided in webhook request')
      return false
    }

    try {
      // –°–æ–∑–¥–∞—ë–º HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å
      const crypto = require('crypto')
      const hmac = crypto.createHmac('sha256', webhookSecret)
      hmac.update(payload)
      const expectedSignature = hmac.digest('hex')

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç timing attacks)
      const isValid = crypto.timingSafeEqual(
        Buffer.from(signature),
        Buffer.from(expectedSignature)
      )

      if (!isValid) {
        console.error('‚ùå Webhook signature mismatch')
        console.error('   Expected:', expectedSignature)
        console.error('   Received:', signature)
      }

      return isValid
    } catch (error) {
      console.error('‚ùå Error verifying webhook signature:', error)
      return false
    }
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞
 * @param apiVersion - –≤–µ—Ä—Å–∏—è API (v1 –∏–ª–∏ v2), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é v1
 */
export function createTochkaClient(apiVersion: string = 'v1'): TochkaClient {
  return new TochkaClient(apiVersion)
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default TochkaClient
