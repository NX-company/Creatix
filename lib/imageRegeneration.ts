/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–æ–≤—ã—Ö IMAGE_PLACEHOLDER –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º HTML
 * –∏ —Å–ø–∏—Å–∞–Ω–∏—è 0.1 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */

export function countNewImagePlaceholders(originalHTML: string, editedHTML: string): number {
  const originalCount = (originalHTML.match(/IMAGE_PLACEHOLDER/g) || []).length
  const editedCount = (editedHTML.match(/IMAGE_PLACEHOLDER/g) || []).length

  const newPlaceholders = Math.max(0, editedCount - originalCount)

  console.log(`üñºÔ∏è Image placeholders: original ${originalCount}, edited ${editedCount}, new ${newPlaceholders}`)

  return newPlaceholders
}

/**
 * –°–ø–∏—Å—ã–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export async function consumeImageRegenerations(
  imageCount: number,
  session: any
): Promise<{ success: boolean; error?: string; remaining?: number }> {
  if (imageCount <= 0) {
    return { success: true, remaining: 0 }
  }

  const generationsCost = imageCount * 0.1

  console.log(`üí∞ Consuming ${generationsCost} generations for ${imageCount} image regenerations`)

  try {
    const response = await fetch('/api/user/consume-generation-fractional', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        amount: generationsCost,
        reason: `Image regeneration (${imageCount} images)`
      })
    })

    if (!response.ok) {
      const error = await response.json()
      return { success: false, error: error.error || 'Failed to consume generations' }
    }

    const data = await response.json()
    return { success: true, remaining: data.remainingGenerations }

  } catch (error) {
    console.error('‚ùå Error consuming regeneration:', error)
    return { success: false, error: 'Network error' }
  }
}
