/**
 * In-Memory Request Queue
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ rate limiting
 */

interface QueuedRequest<T = any> {
  id: string
  priority: number // 0 = highest, 10 = lowest
  provider: 'openrouter' | 'replicate' | 'openai'
  request: () => Promise<T>
  resolve: (value: T) => void
  reject: (error: Error) => void
  timestamp: number
  retryCount: number
  maxRetries: number
  timeout?: number
}

interface QueueStats {
  pending: number
  processing: number
  completed: number
  failed: number
  averageWaitTime: number
  averageProcessingTime: number
}

class RequestQueueManager {
  private queue: QueuedRequest[] = []
  private processing = new Set<string>()
  private completed = new Map<string, number>() // requestId -> completionTime
  private failed = new Map<string, Error>()

  private readonly maxConcurrentRequests: Record<string, number> = {
    openrouter: 50, // 50 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ OpenRouter
    replicate: 30, // 30 –¥–ª—è Replicate
    openai: 3, // 3 –¥–ª—è DALL-E 3 (–º–µ–¥–ª–µ–Ω–Ω—ã–π)
  }

  private processingTimer: NodeJS.Timeout | null = null
  private statsResetTimer: NodeJS.Timeout | null = null

  constructor() {
    this.startProcessing()
    this.startStatsReset()
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
   */
  async enqueue<T>(
    provider: 'openrouter' | 'replicate' | 'openai',
    request: () => Promise<T>,
    options: {
      priority?: number
      maxRetries?: number
      timeout?: number
    } = {}
  ): Promise<T> {
    return new Promise<T>((resolve, reject) => {
      const queuedRequest: QueuedRequest<T> = {
        id: this.generateRequestId(),
        priority: options.priority ?? 5,
        provider,
        request,
        resolve: resolve as any,
        reject,
        timestamp: Date.now(),
        retryCount: 0,
        maxRetries: options.maxRetries ?? 3,
        timeout: options.timeout,
      }

      this.queue.push(queuedRequest)
      this.sortQueue()

      console.log(
        `üì• Queued request ${queuedRequest.id} (${provider}, priority ${queuedRequest.priority})`
      )
      console.log(`   Queue size: ${this.queue.length}, Processing: ${this.processing.size}`)
    })
  }

  /**
   * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
   */
  private sortQueue(): void {
    this.queue.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      if (a.priority !== b.priority) {
        return a.priority - b.priority
      }
      // –ü–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (FIFO)
      return a.timestamp - b.timestamp
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  private async processQueue(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const provider of ['openrouter', 'replicate', 'openai'] as const) {
      const currentProcessing = Array.from(this.processing).filter((id) => {
        const request = this.queue.find((r) => r.id === id)
        return request?.provider === provider
      }).length

      const maxConcurrent = this.maxConcurrentRequests[provider]
      const availableSlots = maxConcurrent - currentProcessing

      if (availableSlots <= 0) continue

      // –ë–µ—Ä–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const providerRequests = this.queue
        .filter((r) => r.provider === provider && !this.processing.has(r.id))
        .slice(0, availableSlots)

      for (const request of providerRequests) {
        this.processRequest(request)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
   */
  private async processRequest(queuedRequest: QueuedRequest): Promise<void> {
    this.processing.add(queuedRequest.id)
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const index = this.queue.findIndex((r) => r.id === queuedRequest.id)
    if (index !== -1) {
      this.queue.splice(index, 1)
    }

    const startTime = Date.now()

    try {
      console.log(
        `‚ö° Processing request ${queuedRequest.id} (${queuedRequest.provider}, attempt ${queuedRequest.retryCount + 1}/${queuedRequest.maxRetries + 1})`
      )

      // –î–æ–±–∞–≤–ª—è–µ–º timeout –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      let result: any
      if (queuedRequest.timeout) {
        result = await Promise.race([
          queuedRequest.request(),
          this.timeoutPromise(queuedRequest.timeout),
        ])
      } else {
        result = await queuedRequest.request()
      }

      const duration = Date.now() - startTime
      console.log(`‚úÖ Request ${queuedRequest.id} completed in ${duration}ms`)

      this.completed.set(queuedRequest.id, duration)
      this.processing.delete(queuedRequest.id)

      queuedRequest.resolve(result)
    } catch (error) {
      const duration = Date.now() - startTime
      console.error(
        `‚ùå Request ${queuedRequest.id} failed after ${duration}ms:`,
        error instanceof Error ? error.message : error
      )

      // Retry logic
      if (queuedRequest.retryCount < queuedRequest.maxRetries) {
        queuedRequest.retryCount++
        this.processing.delete(queuedRequest.id)
        
        console.log(
          `üîÑ Retrying request ${queuedRequest.id} (attempt ${queuedRequest.retryCount + 1}/${queuedRequest.maxRetries + 1})`
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          this.queue.push(queuedRequest)
          this.sortQueue()
        }, 1000 * queuedRequest.retryCount) // Exponential backoff
      } else {
        this.failed.set(queuedRequest.id, error as Error)
        this.processing.delete(queuedRequest.id)
        queuedRequest.reject(error as Error)
      }
    }
  }

  /**
   * Promise –¥–ª—è timeout
   */
  private timeoutPromise(ms: number): Promise<never> {
    return new Promise((_, reject) => {
      setTimeout(() => reject(new Error(`Request timeout after ${ms}ms`)), ms)
    })
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   */
  private generateRequestId(): string {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  getStats(): QueueStats {
    const completedTimes = Array.from(this.completed.values())
    const avgProcessingTime =
      completedTimes.length > 0
        ? completedTimes.reduce((sum, t) => sum + t, 0) / completedTimes.length
        : 0

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    const currentTime = Date.now()
    const waitTimes = this.queue.map((r) => currentTime - r.timestamp)
    const avgWaitTime =
      waitTimes.length > 0 ? waitTimes.reduce((sum, t) => sum + t, 0) / waitTimes.length : 0

    return {
      pending: this.queue.length,
      processing: this.processing.size,
      completed: this.completed.size,
      failed: this.failed.size,
      averageWaitTime: Math.round(avgWaitTime),
      averageProcessingTime: Math.round(avgProcessingTime),
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
   */
  getProviderStats(provider: 'openrouter' | 'replicate' | 'openai'): any {
    const providerQueue = this.queue.filter((r) => r.provider === provider)
    const providerProcessing = Array.from(this.processing).filter((id) => {
      const request = this.queue.find((r) => r.id === id)
      return request?.provider === provider
    })

    return {
      provider,
      pending: providerQueue.length,
      processing: providerProcessing.length,
      maxConcurrent: this.maxConcurrentRequests[provider],
      utilizationPercent: Math.round(
        (providerProcessing.length / this.maxConcurrentRequests[provider]) * 100
      ),
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  private startProcessing(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 100ms –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    this.processingTimer = setInterval(() => {
      this.processQueue()
    }, 100)

    console.log('üöÄ Request Queue Manager started')
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  private startStatsReset(): void {
    this.statsResetTimer = setInterval(() => {
      const stats = this.getStats()
      console.log(
        `üìä Queue Stats: ${stats.pending} pending, ${stats.processing} processing, ${stats.completed} completed, ${stats.failed} failed`
      )
      console.log(
        `   Avg wait: ${stats.averageWaitTime}ms, Avg processing: ${stats.averageProcessingTime}ms`
      )

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
      const fiveMinutesAgo = Date.now() - 5 * 60 * 1000
      for (const [id, time] of this.completed.entries()) {
        if (time < fiveMinutesAgo) {
          this.completed.delete(id)
        }
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
      this.failed.clear()
    }, 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  stop(): void {
    if (this.processingTimer) {
      clearInterval(this.processingTimer)
      this.processingTimer = null
    }
    if (this.statsResetTimer) {
      clearInterval(this.statsResetTimer)
      this.statsResetTimer = null
    }
    console.log('üõë Request Queue Manager stopped')
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  getAvailableSlots(provider: 'openrouter' | 'replicate' | 'openai'): number {
    const currentProcessing = Array.from(this.processing).filter((id) => {
      const request = this.queue.find((r) => r.id === id)
      return request?.provider === provider
    }).length

    return this.maxConcurrentRequests[provider] - currentProcessing
  }
}

// Singleton instance
let queueInstance: RequestQueueManager | null = null

export function getRequestQueue(): RequestQueueManager {
  if (!queueInstance) {
    queueInstance = new RequestQueueManager()
  }
  return queueInstance
}

export type { QueuedRequest, QueueStats }

