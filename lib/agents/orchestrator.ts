/**
 * ============================================
 * DOCUMENT GENERATION ORCHESTRATOR
 * ============================================
 *
 * –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.
 *
 * –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:
 *
 * 1. ADVANCED (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π):
 *    - –¢–µ–∫—Å—Ç: Claude/Gemini (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å)
 *    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: Flux 1.1 Pro (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
 *    - QA –ø—Ä–æ–≤–µ—Ä–∫–∞: –í–∫–ª—é—á–µ–Ω–∞
 *    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π/–º–µ—Å—è—Ü (–ø–æ–¥–ø–∏—Å–∫–∞)
 *
 * 2. FREE (–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π):
 *    - –¢–µ–∫—Å—Ç: Gemini Flash (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
 *    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ù–µ—Ç
 *    - QA –ø—Ä–æ–≤–µ—Ä–∫–∞: –û—Ç–∫–ª—é—á–µ–Ω–∞
 *    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 30 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π/–º–µ—Å—è—Ü (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
 *
 * –°–•–ï–ú–ê –†–ê–ë–û–¢–´:
 * 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ä–µ–∂–∏–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç appMode)
 * 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ ADVANCED)
 * 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Flux (—Ç–æ–ª—å–∫–æ ADVANCED)
 * 4. –°–±–æ—Ä–∫–∞ HTML —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
 * 5. –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
 * 6. QA –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ ADVANCED)
 *
 * @module orchestrator
 */

import type { AppMode, DocType, UploadedImage } from '../store'
import { generateContent, generateContentWithImages, generateHTML } from '../api'
import { generateHTMLWithGPT4o } from '../api-openai'
import { generateImagesForDocument, generateImagesFromPlan, replaceImagePlaceholders, type GeneratedImage } from './imageAgent'
import { MODE_CONFIG } from '../config/modes'
import { analyzeContentForImages, type ContentAnalysisResult } from './contentAnalyzer'
import { reviewDocument, buildFeedbackForAgents, type QAReport } from './qaAgent'
import { AGENT_MODELS, QA_CONFIG } from '../config/agents'

export type GenerationResult = {
  html: string
  content: string
  generatedImages: GeneratedImage[]
  mode: AppMode
  qaReport?: QAReport
  iterations?: number
  contentAnalysis?: ContentAnalysisResult
}

export type ProgressCallback = (message: string) => void

export async function generateDocumentWithMode(params: {
  prompt: string
  docType: DocType
  mode: AppMode
  styleConfig: any
  uploadedImages: UploadedImage[]
  priceItems: any[]
  parsedWebsiteData?: any
  onProgress?: ProgressCallback
}): Promise<GenerationResult> {
  const { prompt, docType, styleConfig, uploadedImages, parsedWebsiteData, onProgress } = params
  
  // Normalize mode to lowercase to ensure compatibility with MODE_CONFIG
  const mode = (params.mode?.toLowerCase() || 'free') as AppMode

  const notify = (message: string) => {
    console.log(message)
    onProgress?.(message)
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤ prompt
  if (prompt.includes('–ü–õ–ê–ù –î–û–ö–£–ú–ï–ù–¢–ê')) {
    console.log('‚úÖ Orchestrator received PLAN CONTEXT in prompt')
    const planMatch = prompt.match(/üìã –ü–õ–ê–ù –î–û–ö–£–ú–ï–ù–¢–ê[\s\S]*?‚ö†Ô∏è –í–ê–ñ–ù–û: –°–ª–µ–¥—É–π –≠–¢–û–ú–£ –ø–ª–∞–Ω—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞!/)
    if (planMatch) {
      console.log('üìã Plan section length:', planMatch[0].length, 'chars')
      if (planMatch[0].includes('—Å–æ–±—Ä–∞–Ω —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥')) {
        console.log('üí¨ Conversational plan detected')
      }
    }
  } else {
    console.log('‚ÑπÔ∏è No plan context in prompt (direct build mode)')
  }

  const modeNames = {
    guest: '–≥–æ—Å—Ç–µ–≤–æ–º',
    free: '–±–µ—Å–ø–ª–∞—Ç–Ω–æ–º',
    advanced: '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º',
    pro: 'ADVANCED'
  }
  
  notify(`üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ ${modeNames[mode]} —Ä–µ–∂–∏–º–µ`)
  
  if (styleConfig && (styleConfig.name || styleConfig.primaryColor)) {
    const styleName = styleConfig.name || 'Custom'
    notify(`üé® –ü—Ä–∏–º–µ–Ω—è—é —Å—Ç–∏–ª—å: "${styleName}" (${styleConfig.primaryColor})`)
  }

  let iteration = 0
  let qaApproved = false
  let qaReport: QAReport | null = null
  let previousFeedback = ''
  
  let content = ''
  let html = ''
  let generatedImages: GeneratedImage[] = []
  let contentAnalysis: ContentAnalysisResult | null = null

  try {
    const config = MODE_CONFIG[mode]
    const textModel = config.models.text
    const useMultimodal = mode === 'advanced' && 'multimodal' in textModel && textModel.multimodal && uploadedImages.length > 0
    
    while (iteration < QA_CONFIG.maxIterations && !qaApproved) {
      iteration++
      
      if (iteration > 1) {
        notify(`üîÑ –£–ª—É—á—à–∞—é –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–ø—ã—Ç–∫–∞ ${iteration}/${QA_CONFIG.maxIterations})`)
      }
      
      if (previousFeedback) {
        const shortFeedback = previousFeedback.length > 80 
          ? previousFeedback.substring(0, 80) + '...'
          : previousFeedback
        notify(`üìã –£—á–∏—Ç—ã–≤–∞—é –∑–∞–º–µ—á–∞–Ω–∏—è: ${shortFeedback}`)
      }

      if (useMultimodal) {
        notify(`üëÄ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ ${uploadedImages.length} ${uploadedImages.length === 1 ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : uploadedImages.length < 5 ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}...`)
        const textPrompt = previousFeedback 
          ? `${prompt}\n\nIMPROVEMENT REQUIRED:\n${previousFeedback}` 
          : prompt
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ADVANCED —Ä–µ–∂–∏–º–µ
        const analysisModel = mode === 'advanced'
          ? 'openai/gpt-4o'  // –õ—É—á—à–∏–π multimodal –∞–Ω–∞–ª–∏–∑
          : config.models.text.model
        console.log(`üîç Image analysis using model: ${analysisModel}`)
        content = await generateContentWithImages(
          textPrompt, 
          docType, 
          uploadedImages,
          analysisModel
        )
        notify(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`)
      } else {
        notify(`üìù –ü–∏—à—É —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞...`)
        const model = mode === 'advanced' ? AGENT_MODELS.text : AGENT_MODELS.freeMode
        const textPrompt = previousFeedback 
          ? `${prompt}\n\nIMPROVEMENT REQUIRED:\n${previousFeedback}` 
          : prompt
        content = await generateContent(textPrompt, docType, model)
        notify(`‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤`)
      }

      // ============================================
      // ADVANCED –†–ï–ñ–ò–ú: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      // ============================================
      if (mode === 'advanced' || mode === 'guest') {
        const isGuest = mode === 'guest'

        if (isGuest) {
          notify(`üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ADVANCED —Ä–µ–∂–∏–º–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...`)
        }

        notify(`üé® –ü–ª–∞–Ω–∏—Ä—É—é AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...`)

        const planImageCountMatch = prompt.match(/üìÑ –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô: (\d+)/)
        const userRequestedCount = planImageCountMatch ? parseInt(planImageCountMatch[1]) : undefined

        contentAnalysis = await analyzeContentForImages(prompt, content, docType, previousFeedback, false, uploadedImages.length, userRequestedCount)

        const imageCount = contentAnalysis.imagePrompts.length
        if (imageCount > 0) {
          notify(`üñºÔ∏è –°–æ–∑–¥–∞—é ${imageCount} ${imageCount === 1 ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : imageCount < 5 ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}...`)

          // ADVANCED –∏ GUEST —Ä–µ–∂–∏–º—ã: Flux 1.1 Pro (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
          const fluxModel = 'black-forest-labs/flux-1.1-pro'

          const images: GeneratedImage[] = []
          for (let i = 0; i < contentAnalysis.imagePrompts.length; i++) {
            const plan = contentAnalysis.imagePrompts[i]
            const shortPrompt = plan.prompt.length > 50
              ? plan.prompt.substring(0, 50) + '...'
              : plan.prompt
            notify(`üé® –†–∏—Å—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/${imageCount}: "${shortPrompt}"`)

            const singleImage = await generateImagesFromPlan([plan], previousFeedback, fluxModel)
            images.push(...singleImage)
          }
          generatedImages = images

          notify(`‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!`)
        } else {
          notify(`‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞`)
        }

        // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–¥—É—Ç –ü–ï–†–í–´–ú–ò (IMAGE_0, IMAGE_1, ...), –∑–∞—Ç–µ–º AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const uploadedImagesCount = uploadedImages.length

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç GeneratedImage –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        const uploadedAsGenerated: GeneratedImage[] = uploadedImages.map((img, index) => ({
          prompt: `Uploaded: ${img.name}`,
          dataUrl: img.base64,
          slot: index
        }))

        // –û–±–Ω–æ–≤–ª—è–µ–º slot —É AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ–Ω–∏ —à–ª–∏ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
        const adjustedGeneratedImages = generatedImages.map((img, index) => ({
          ...img,
          slot: uploadedImagesCount + index
        }))

        const allImages = [
          ...uploadedImages,
          ...adjustedGeneratedImages.map((img) => ({
            id: `ai-${img.slot}`,
            name: `AI Generated ${img.slot - uploadedImagesCount + 1}`,
            base64: img.dataUrl,
            type: 'image/png',
          })),
        ]

        notify(`üèóÔ∏è –°–æ–±–∏—Ä–∞—é –¥–æ–∫—É–º–µ–Ω—Ç —Å –¥–∏–∑–∞–π–Ω–æ–º...`)
        html = await generateHTML(content, docType, styleConfig, allImages)
        notify(`‚úÖ –î–∏–∑–∞–π–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω`)

        notify(`üîß –í—Å—Ç–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞...`)
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const allImagesForReplacement = [...uploadedAsGenerated, ...adjustedGeneratedImages]
        html = replaceImagePlaceholders(html, allImagesForReplacement)

        // –î–ª—è ADVANCED —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        if (!isGuest) {
          notify(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...`)
          qaReport = await reviewDocument(prompt, content, generatedImages, html, docType, iteration)

          if (qaReport.approved && qaReport.score >= QA_CONFIG.approvalThreshold) {
            qaApproved = true
            notify(`üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –û—Ü–µ–Ω–∫–∞: ${qaReport.score}/100`)
          } else {
            notify(`‚ö†Ô∏è –ù—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è (–æ—Ü–µ–Ω–∫–∞ ${qaReport.score}/100)`)

            if (iteration < QA_CONFIG.maxIterations) {
              previousFeedback = buildFeedbackForAgents(qaReport)
            } else {
              notify(`‚è±Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç`)
            }
          }
        } else {
          // –î–ª—è GUEST —Ä–µ–∂–∏–º–∞ - —Å—Ä–∞–∑—É –æ–¥–æ–±—Ä—è–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
          qaApproved = true
          notify(`‚ú® –î–µ–º–æ –≥–æ—Ç–æ–≤–æ!`)
        }
      // ============================================
      // FREE –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      // ============================================
      } else if (mode === 'free') {
        // FREE —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
        // - –ì–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π ADVANCED –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2-4)
        // - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (30 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π/–º–µ—Å—è—Ü)
        notify(`üèóÔ∏è –û—Ñ–æ—Ä–º–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç...`)
        html = await generateHTML(content, docType, styleConfig, uploadedImages)
        notify(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤`)
        qaApproved = true
      }
    }

    notify(`‚ú® –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`)

    return {
      html,
      content,
      generatedImages,
      mode,
      qaReport: qaReport || undefined,
      iterations: iteration,
      contentAnalysis: contentAnalysis || undefined,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    notify(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${errorMessage}`)
    console.error('‚ùå Orchestrator error:', error)
    throw error
  }
}

