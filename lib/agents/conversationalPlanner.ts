import { fetchWithTimeout } from '../fetchWithTimeout'
import { API_TIMEOUTS } from '../constants'
import type { DocType, PlanningData, AppMode, Message } from '../store'
import { getDocTypeConfig } from '../docTypesConfig'

interface ConversationalResponse {
  response: string
  updatedData: Partial<PlanningData>
  isComplete: boolean
  shouldSwitchToBuild: boolean
}

/**
 * Conversational Planning Agent
 * –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export async function processConversationalPlanning(
  userInput: string,
  docType: DocType,
  currentPlanningData: PlanningData,
  conversationHistory: Message[],
  appMode: AppMode
): Promise<ConversationalResponse> {
  
  const modelByMode: Record<AppMode, string> = {
    free: 'google/gemini-2.5-flash-lite',
    advanced: 'google/gemini-2.0-flash-001',
    pro: 'openai/gpt-4o'
  }
  
  const selectedModel = modelByMode[appMode]
  const docConfig = getDocTypeConfig(docType)
  const docLabel = docConfig?.label || '–¥–æ–∫—É–º–µ–Ω—Ç–∞'
  
  // –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
  const planContext = buildPlanContext(currentPlanningData)
  
  // –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–æ–º–∞–Ω–¥—ã –≤–∞—Ä–∏–∞—Ü–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–ª–∞–Ω–æ–º
  const hasExistingPlan = currentPlanningData.theme || currentPlanningData.targetAudience || 
    (currentPlanningData.goals && currentPlanningData.goals.length > 0)
  
  const variationKeywords = ['–µ—â–µ', '—Ç–∞–∫–æ–π –∂–µ', '—Ç–∞–∫–∏—Ö –∂–µ', '–ø–æ—Ö–æ–∂', '–≤–∞—Ä–∏–∞—Ü–∏', '–≤–∞—Ä–∏–∞–Ω—Ç', '—à—Ç—É–∫', '—à—Ç—É–∫–∏']
  const isVariationRequest = variationKeywords.some(keyword => 
    userInput.toLowerCase().includes(keyword)
  )
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤–∞—Ä–∏–∞—Ü–∏—é - —Å—Ä–∞–∑—É –≥–æ—Ç–æ–≤–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  if (hasExistingPlan && isVariationRequest) {
    console.log('üîÑ Detected variation request with existing plan - quick path!')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const numberMatch = userInput.match(/(\d+)\s*(—à—Ç—É–∫|—à—Ç—É–∫–∏|–ª–æ–≥–æ—Ç–∏–ø|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–≤–∞—Ä–∏–∞–Ω—Ç|–≤–∞—Ä–∏–∞—Ü–∏)/i)
    const requestedCount = numberMatch ? parseInt(numberMatch[1]) : null
    
    const updatedData: Partial<PlanningData> = {
      isComplete: true
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if (requestedCount) {
      updatedData.imageCount = requestedCount
      console.log(`üìä Updated image count to ${requestedCount}`)
    }
    
    const countText = requestedCount ? `${requestedCount} ` : ''
    const response = `‚ú® –û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–ª–∞–Ω–∞:
    
üìã –ü–ª–∞–Ω:
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${currentPlanningData.theme || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${currentPlanningData.targetAudience || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –¶–µ–ª–∏: ${currentPlanningData.goals?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${currentPlanningData.visualPreferences || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
${requestedCount ? `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${requestedCount}\n` : ''}
–ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! üöÄ`
    
    return {
      response,
      updatedData,
      isComplete: true,
      shouldSwitchToBuild: true
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  const systemPrompt = `–¢—ã —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${docLabel}.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –û–±—â–∞—Ç—å—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
2. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
3. –ü–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã: "–∑–∞–Ω–æ–≤–æ", "—Å–Ω–∞—á–∞–ª–∞", "–Ω–µ –∑–Ω–∞—é", "–¥–µ–ª–∞–π", "–ø—Ä–æ–ø—É—Å—Ç–∏"
5. –ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

–í–ê–ñ–ù–û:
- –ù–µ –∑–∞–¥–∞–≤–∞–π –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É —Å–ø–∏—Å–∫–æ–º
- –ó–∞–¥–∞–≤–∞–π 1-2 –≤–æ–ø—Ä–æ—Å–∞ –∑–∞ —Ä–∞–∑, —É—Ç–æ—á–Ω—è—è –¥–µ—Ç–∞–ª–∏
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–Ω–µ –∑–Ω–∞—é" - –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–¥–µ–ª–∞–π/–Ω–∞—á–∏–Ω–∞–π/–≥–µ–Ω–µ—Ä–∏—Ä—É–π" –∏ –ø–ª–∞–Ω –≥–æ—Ç–æ–≤ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–∑–∞–Ω–æ–≤–æ/—Å–Ω–∞—á–∞–ª–∞" - –Ω–∞—á–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –≥–∏–±–∫–∏–º

–†–ê–ë–û–¢–ê –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ü–õ–ê–ù–û–ú:
${planContext}

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û –î–õ–Ø –ü–û–í–¢–û–†–ù–´–• –ó–ê–ü–†–û–°–û–í:
- –ï—Å–ª–∏ –≤ –ø–ª–∞–Ω–µ –≤—ã—à–µ –Ω–∞–ø–∏—Å–∞–Ω–æ "–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–õ–ê–ù" –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç "–µ—â–µ N", "—Ç–∞–∫–æ–π –∂–µ", "N —à—Ç—É–∫", "–≤–∞—Ä–∏–∞—Ü–∏–∏"
- –ù–ï –∑–∞–¥–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ü–µ–ª—è—Ö, —Ü–≤–µ—Ç–∞—Ö!
- –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ intent: "ready_to_generate"
- –û–±–Ω–æ–≤–∏ —Ç–æ–ª—å–∫–æ imageCount –∏–ª–∏ pageCount –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- –ü—Ä–∏–º–µ—Ä: "–û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Creatix, –∫—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å). –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å?"

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–¢—ã –û–ë–Ø–ó–ê–ù –æ—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON. –ù–ï –¥–æ–±–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON!

–ü–†–ê–í–ò–õ–¨–ù–û:
{"response": "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?", "intent": "need_more_info", "extractedData": {"theme": null}, "completeness": 10}

–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û (–ù–ï –î–ï–õ–ê–ô –¢–ê–ö!):
–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏?
[markdown –±–ª–æ–∫–∏ —Å json]

–§–æ—Ä–º–∞—Ç JSON:
{
  "response": "—Ç–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)",
  "intent": "continue" | "ready_to_generate" | "reset" | "need_more_info",
  "extractedData": {
    "theme": "—Ç–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞" –∏–ª–∏ null,
    "targetAudience": "—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è" –∏–ª–∏ null,
    "goals": ["—Ü–µ–ª—å1", "—Ü–µ–ª—å2"] –∏–ª–∏ [],
    "keyMessages": ["—Å–æ–æ–±—â–µ–Ω–∏–µ1"] –∏–ª–∏ [],
    "visualPreferences": "—Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª—å" –∏–ª–∏ null,
    "additionalNotes": "–¥–æ–ø. –∑–∞–º–µ—Ç–∫–∏" –∏–ª–∏ null,
    "pageCount": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "imageCount": —á–∏—Å–ª–æ –∏–ª–∏ null
  },
  "completeness": 0-100
}

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:
1. –ù–∞—á–∞–ª–æ: {"response": "–î–ª—è –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–µ–Ω –ª–æ–≥–æ—Ç–∏–ø?", "intent": "need_more_info", "extractedData": {"theme": null}, "completeness": 5}
2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {"response": "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?", "intent": "continue", "extractedData": {"theme": "Creatix", "goals": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"]}, "completeness": 40}
3. –ì–æ—Ç–æ–≤–æ: {"response": "–ü–ª–∞–Ω –≥–æ—Ç–æ–≤! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", "intent": "ready_to_generate", "extractedData": {}, "completeness": 100}`

  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LLM
    const messages = [
      { role: 'system', content: systemPrompt },
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      ...conversationHistory.slice(-10).map(msg => ({
        role: msg.role,
        content: msg.content
      })),
      { role: 'user', content: userInput }
    ]

    console.log('ü§ñ Conversational Planner: Calling LLM with', messages.length, 'messages')

    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages,
        model: selectedModel,
        temperature: 0.7,
        max_tokens: 1000
      })
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      throw new Error('LLM request failed')
    }

    const data = await response.json()
    
    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let result
    try {
      let cleanContent = data.content
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .trim()
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å–ª–∏ LLM –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const jsonMatch = cleanContent.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        cleanContent = jsonMatch[0]
      }
      
      result = JSON.parse(cleanContent)
    } catch (parseError) {
      console.error('‚ùå Failed to parse LLM response:', parseError)
      console.log('üìÑ Raw content:', data.content.substring(0, 200))
      console.warn('‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ JSON. –°–æ–∑–¥–∞—é fallback JSON...')
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const textContent = data.content
      const fallbackExtracted: any = {}
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–µ–º–µ/–∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const recentUserMessages = conversationHistory
        .filter(m => m.role === 'user')
        .slice(-3) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        .map(m => m.content)
      
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏/—Ç–µ–º—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!currentPlanningData.theme) {
        for (const msg of recentUserMessages) {
          // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —Å–ª–æ–≤–∞ –∏–∑ 3+ –±—É–∫–≤ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
          const companyMatch = msg.match(/\b([A-Z–ê-–Ø–Å][a-z–∞-—è—ë]{2,}[A-Z–ê-–Ø–Åa-z–∞-—è—ë]*)\b/)
          if (companyMatch && !['Creatix', '–î–ª—è', '–ö–∞–∫–æ–π'].includes(companyMatch[1])) {
            fallbackExtracted.theme = companyMatch[1]
            console.log('üîç Extracted theme from user message:', companyMatch[1])
            break
          }
        }
      }
      
      // –ò—â–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
      if (!currentPlanningData.targetAudience) {
        for (const msg of recentUserMessages) {
          if (msg.match(/–¥–ª—è\s+(–≤—Å–µ—Ö|–∫–ª–∏–µ–Ω—Ç–æ–≤|–±–∏–∑–Ω–µ—Å–∞|–∫–æ–º–ø–∞–Ω–∏–∏)/i)) {
            const audienceMatch = msg.match(/–¥–ª—è\s+([^.,\n]+)/i)
            if (audienceMatch) {
              fallbackExtracted.targetAudience = audienceMatch[1].trim()
              console.log('üîç Extracted audience from user message:', audienceMatch[1])
              break
            }
          }
        }
      }
      
      // –ò—â–µ–º —Ü–µ–ª–∏
      if ((!currentPlanningData.goals || currentPlanningData.goals.length === 0) && 
          userInput.match(/(–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä|–∫—É–ø–∏–ª|—É–∑–Ω–∞–ª|–ø–æ–¥–ø–∏—Å–∞–ª|—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü)/i)) {
        const goalMatch = userInput.match(/—á—Ç–æ\s*–±—ã\s+([^.,\n]+)/i) || 
                         userInput.match(/(–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä[^.,\n]+|–∫—É–ø–∏–ª[^.,\n]+|—É–∑–Ω–∞–ª[^.,\n]+)/i)
        if (goalMatch) {
          fallbackExtracted.goals = [goalMatch[1].trim()]
          console.log('üîç Extracted goal from user message:', goalMatch[1])
        }
      }
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      result = {
        response: data.content,
        intent: 'continue',
        extractedData: fallbackExtracted,
        completeness: Math.min(
          (currentPlanningData.theme || fallbackExtracted.theme ? 20 : 0) +
          (currentPlanningData.targetAudience || fallbackExtracted.targetAudience ? 20 : 0) +
          ((currentPlanningData.goals?.length || fallbackExtracted.goals?.length) > 0 ? 20 : 0) +
          (currentPlanningData.visualPreferences ? 20 : 0) +
          (currentPlanningData.keyMessages?.length > 0 ? 20 : 0),
          80
        )
      }
      console.log('‚úÖ Fallback JSON created with extracted data:', {
        intent: result.intent,
        completeness: result.completeness,
        extracted: Object.keys(fallbackExtracted).length
      })
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    const shouldSwitchToBuild = result.intent === 'ready_to_generate'
    const isComplete = result.completeness >= 80 || shouldSwitchToBuild

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedData: Partial<PlanningData> = {}
    
    if (result.intent === 'reset') {
      // –°–±—Ä–æ—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      return {
        response: result.response,
        updatedData: {
          theme: '',
          targetAudience: '',
          goals: [],
          keyMessages: [],
          visualPreferences: '',
          additionalNotes: '',
          isComplete: false,
          selectedQuestions: [],
          currentQuestionIndex: 0,
          collectedAnswers: {}
        },
        isComplete: false,
        shouldSwitchToBuild: false
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (result.extractedData) {
      const extracted = result.extractedData
      
      if (extracted.theme) {
        updatedData.theme = extracted.theme
      }
      if (extracted.targetAudience) {
        updatedData.targetAudience = extracted.targetAudience
      }
      if (extracted.goals && extracted.goals.length > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ü–µ–ª—è–º–∏
        const existingGoals = currentPlanningData.goals || []
        updatedData.goals = [...new Set([...existingGoals, ...extracted.goals])]
      }
      if (extracted.keyMessages && extracted.keyMessages.length > 0) {
        const existingMessages = currentPlanningData.keyMessages || []
        updatedData.keyMessages = [...new Set([...existingMessages, ...extracted.keyMessages])]
      }
      if (extracted.visualPreferences) {
        updatedData.visualPreferences = extracted.visualPreferences
      }
      if (extracted.additionalNotes) {
        const existingNotes = currentPlanningData.additionalNotes || ''
        updatedData.additionalNotes = existingNotes 
          ? `${existingNotes}\n${extracted.additionalNotes}` 
          : extracted.additionalNotes
      }
      if (extracted.pageCount) {
        updatedData.pageCount = extracted.pageCount
      }
      if (extracted.imageCount) {
        updatedData.imageCount = extracted.imageCount
      }
      
      updatedData.isComplete = isComplete
    }

    console.log('‚úÖ Conversational Planner:', {
      intent: result.intent,
      completeness: result.completeness,
      shouldSwitchToBuild
    })

    return {
      response: result.response,
      updatedData,
      isComplete,
      shouldSwitchToBuild
    }

  } catch (error) {
    console.error('Conversational planning error:', error)
    return {
      response: 'üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!',
      updatedData: {},
      isComplete: false,
      shouldSwitchToBuild: false
    }
  }
}

/**
 * –°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function buildPlanContext(planningData: PlanningData): string {
  const parts: string[] = []
  
  if (planningData.theme) {
    parts.push(`–¢–µ–º–∞: ${planningData.theme}`)
  }
  if (planningData.targetAudience) {
    parts.push(`–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${planningData.targetAudience}`)
  }
  if (planningData.goals && planningData.goals.length > 0) {
    parts.push(`–¶–µ–ª–∏: ${planningData.goals.join(', ')}`)
  }
  if (planningData.keyMessages && planningData.keyMessages.length > 0) {
    parts.push(`–ö–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${planningData.keyMessages.join(', ')}`)
  }
  if (planningData.visualPreferences) {
    parts.push(`–í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${planningData.visualPreferences}`)
  }
  if (planningData.pageCount) {
    parts.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${planningData.pageCount}`)
  }
  if (planningData.imageCount) {
    parts.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${planningData.imageCount}`)
  }
  
  if (parts.length === 0) {
    return '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ—Å—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.'
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  const hasCompleteData = planningData.theme || planningData.targetAudience || 
    (planningData.goals && planningData.goals.length > 0)
  
  if (hasCompleteData) {
    return `üìã –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–õ–ê–ù (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–±—Ä–∞–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–Ω–µ–µ):
${parts.join('\n')}

üí° –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ ("–µ—â–µ 5 —Ç–∞–∫–∏—Ö –∂–µ", "—Å–¥–µ–ª–∞–π –µ—â–µ", "10 —à—Ç—É–∫")
- –ò–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ ("–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç –Ω–∞ —Å–∏–Ω–∏–π", "–¥—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
- –°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏—é —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

–ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç "–µ—â–µ N", "—Ç–∞–∫–æ–π –∂–µ", "N —à—Ç—É–∫", "–≤–∞—Ä–∏–∞—Ü–∏–∏" - –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞ –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–æ–ª—å–∫–æ —É—Ç–æ—á–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ!`
  }
  
  return parts.join('\n')
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Build —Ä–µ–∂–∏–º–µ
 */
export function formatConversationalPlan(planningData: PlanningData, docType: DocType): string {
  if (!planningData.theme && !planningData.targetAudience && 
      planningData.goals.length === 0 && planningData.keyMessages.length === 0) {
    console.log('üìã No conversational planning data available')
    return ''
  }
  
  let plan = `
üìã –ü–õ–ê–ù –î–û–ö–£–ú–ï–ù–¢–ê (—Å–æ–±—Ä–∞–Ω —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥):

üéØ –¢–ï–ú–ê: ${planningData.theme || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üë• –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø: ${planningData.targetAudience || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üéØ –¶–ï–õ–ò:
${planningData.goals.length > 0 ? planningData.goals.map((g, i) => `${i + 1}. ${g}`).join('\n') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üí¨ –ö–õ–Æ–ß–ï–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
${planningData.keyMessages.length > 0 ? planningData.keyMessages.map((m, i) => `${i + 1}. ${m}`).join('\n') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üé® –í–ò–ó–£–ê–õ–¨–ù–´–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø: ${planningData.visualPreferences || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: ${planningData.additionalNotes || '–ù–µ—Ç'}
`

  if (planningData.pageCount) {
    plan += `\nüìÑ –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–†–ê–ù–ò–¶: ${planningData.pageCount}\n`
  }

  if (planningData.imageCount) {
    plan += `\nüñºÔ∏è –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô: ${planningData.imageCount}\n`
  }

  plan += `\n‚ö†Ô∏è –í–ê–ñ–ù–û: –°–ª–µ–¥—É–π –≠–¢–û–ú–£ –ø–ª–∞–Ω—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞!`
  
  console.log(`üìã Conversational plan generated (${plan.length} chars)`)
  
  return plan
}

