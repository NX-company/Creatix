import { fetchWithTimeout } from '../fetchWithTimeout'
import { API_TIMEOUTS } from '../constants'
import type { DocType, PlanningData, AppMode } from '../store'

const DOC_TYPE_LABELS: Record<DocType, string> = {
  proposal: '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
  invoice: '—Å—á—ë—Ç–∞',
  email: '–ø–∏—Å—å–º–∞',
  presentation: '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
  logo: '–ª–æ–≥–æ—Ç–∏–ø–∞',
  'product-card': '–∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞'
}

async function extractPlanningData(
  answers: Record<string, string>,
  docType: DocType,
  model: string
): Promise<Partial<PlanningData>> {
  const answersText = Object.entries(answers)
    .map(([q, a]) => `${q}: ${a}`)
    .join('\n')

  const prompt = `–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ${DOC_TYPE_LABELS[docType]}.

–û–¢–í–ï–¢–´:
${answersText}

–ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–û–¢–í–ï–¢ –í JSON:
{
  "theme": "–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞" –∏–ª–∏ null,
  "targetAudience": "—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è" –∏–ª–∏ null,
  "goals": ["—Ü–µ–ª—å1", "—Ü–µ–ª—å2"] –∏–ª–∏ [],
  "keyMessages": ["—Å–æ–æ–±—â–µ–Ω–∏–µ1", "—Å–æ–æ–±—â–µ–Ω–∏–µ2"] –∏–ª–∏ [],
  "visualPreferences": "–≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" –∏–ª–∏ null,
  "additionalNotes": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏–ª–∏ null
}`

  try {
    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [{ role: 'user', content: prompt }],
        model,
        temperature: 0.7
      })
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      console.error('Planning extraction API error')
      return {}
    }

    const data = await response.json()
    try {
      const cleanContent = data.content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
      const result = JSON.parse(cleanContent)
      
      const extracted: Partial<PlanningData> = {}
      if (result.theme) extracted.theme = result.theme
      if (result.targetAudience) extracted.targetAudience = result.targetAudience
      if (result.goals?.length > 0) extracted.goals = result.goals
      if (result.keyMessages?.length > 0) extracted.keyMessages = result.keyMessages
      if (result.visualPreferences) extracted.visualPreferences = result.visualPreferences
      if (result.additionalNotes) extracted.additionalNotes = result.additionalNotes
      
      return extracted
    } catch (parseError) {
      console.error('Failed to parse extraction response')
      return {}
    }
  } catch (error) {
    console.error('Planning extraction error:', error)
    return {}
  }
}

export async function processPlanningMode(
  userInput: string,
  docType: DocType,
  currentPlanningData: PlanningData,
  conversationHistory: string,
  appMode: AppMode
): Promise<{ response: string; updatedData: Partial<PlanningData>; isComplete: boolean }> {
  
  const modelByMode: Record<AppMode, string> = {
    free: 'google/gemini-2.5-flash-lite',
    advanced: 'google/gemini-2.0-flash-001',
    pro: 'openai/gpt-4o'
  }
  
  const selectedModel = modelByMode[appMode]
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –≤–æ–ø—Ä–æ—Å—ã
  if (!currentPlanningData.selectedQuestions || currentPlanningData.selectedQuestions.length === 0) {
    return {
      response: `SHOW_PLANNING_CARD`,
      updatedData: {},
      isComplete: false
    }
  }
  
  if (currentPlanningData.selectedQuestions && currentPlanningData.selectedQuestions.length > 0) {
    const { selectedQuestions, currentQuestionIndex, answerMode, collectedAnswers } = currentPlanningData
    
    if (answerMode === 'sequential') {
      const currentQuestion = selectedQuestions[currentQuestionIndex]
      const updatedAnswers = { ...collectedAnswers, [currentQuestion]: userInput }
      
      const nextIndex = currentQuestionIndex + 1
      if (nextIndex < selectedQuestions.length) {
        return {
          response: `‚úÖ –ü—Ä–∏–Ω—è–ª! –í–æ–ø—Ä–æ—Å ${nextIndex + 1}/${selectedQuestions.length}:\n\n‚ùì ${selectedQuestions[nextIndex]}`,
          updatedData: {
            currentQuestionIndex: nextIndex,
            collectedAnswers: updatedAnswers
          },
          isComplete: false
        }
      } else {
        const extractedData = await extractPlanningData(updatedAnswers, docType, selectedModel)
        return {
          response: `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–ª–∞–Ω —Å–æ–±—Ä–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\nüí° –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å? –ï—Å–ª–∏ —è —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª ‚Äî –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n–ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –Ω–∞ Build –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞!`,
          updatedData: {
            ...extractedData,
            collectedAnswers: updatedAnswers
          },
          isComplete: false
        }
      }
    }
    
    if (answerMode === 'batch') {
      const batchAnswers: Record<string, string> = {}
      selectedQuestions.forEach(q => {
        batchAnswers[q] = userInput
      })
      
      const extractedData = await extractPlanningData(batchAnswers, docType, selectedModel)
      return {
        response: `‚úÖ –ü—Ä–∏–Ω—è–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!\n\nüí° –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å? –ú–æ–∂–µ—Ç, —è –∑–∞–±—ã–ª —É—á–µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ—Ç–∞–ª–∏? –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n–ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –Ω–∞ Build, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!`,
        updatedData: {
          ...extractedData,
          collectedAnswers: batchAnswers
        },
        isComplete: false
      }
    }
  }
  
  const prompt = `–¢—ã Planning Agent. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${DOC_TYPE_LABELS[docType]}.

–û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${userInput}"

–ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.

–û–¢–í–ï–¢ –í JSON:
{
  "response": "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Build)",
  "extractedData": {
    "theme": "—Ç–µ–º–∞" –∏–ª–∏ null,
    "targetAudience": "–∞—É–¥–∏—Ç–æ—Ä–∏—è" –∏–ª–∏ null,
    "goals": ["—Ü–µ–ª—å1"] –∏–ª–∏ [],
    "keyMessages": ["—Å–æ–æ–±—â–µ–Ω–∏–µ1"] –∏–ª–∏ [],
    "visualPreferences": "–≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" –∏–ª–∏ null,
    "additionalNotes": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" –∏–ª–∏ null
  }
}`

  try {
    const response = await fetchWithTimeout('/api/openrouter-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [{ role: 'user', content: prompt }],
        model: selectedModel,
        temperature: 0.7
      })
    }, API_TIMEOUTS.DEFAULT)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Planning agent API error:', errorText)
      throw new Error('Planning agent failed')
    }

    const data = await response.json()
    let result
    try {
      const cleanContent = data.content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
      result = JSON.parse(cleanContent)
    } catch (parseError) {
      console.error('Failed to parse planning response:', data.content)
      return {
        response: data.content.substring(0, 500),
        updatedData: {},
        isComplete: false
      }
    }
    
    const updatedData: Partial<PlanningData> = {}
    if (result.extractedData.theme) updatedData.theme = result.extractedData.theme
    if (result.extractedData.targetAudience) updatedData.targetAudience = result.extractedData.targetAudience
    if (result.extractedData.goals?.length > 0) updatedData.goals = [...currentPlanningData.goals, ...result.extractedData.goals]
    if (result.extractedData.keyMessages?.length > 0) updatedData.keyMessages = [...currentPlanningData.keyMessages, ...result.extractedData.keyMessages]
    if (result.extractedData.visualPreferences) updatedData.visualPreferences = result.extractedData.visualPreferences
    if (result.extractedData.additionalNotes) updatedData.additionalNotes = result.extractedData.additionalNotes
    
    let responseText = result.response
    if (!responseText.includes('—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω') && !responseText.includes('–∏–∑–º–µ–Ω–µ–Ω')) {
      responseText += '\n\nüí° –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.'
    }
    
    return {
      response: responseText,
      updatedData,
      isComplete: false
    }
  } catch (error) {
    console.error('Planning agent error:', error)
    return {
      response: '‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      updatedData: {},
      isComplete: false
    }
  }
}

export function formatPlanForGeneration(planningData: PlanningData, docType: DocType): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const hasData = planningData.theme || planningData.targetAudience || planningData.goals.length > 0 || 
                  planningData.keyMessages.length > 0 || planningData.visualPreferences || 
                  (planningData.selectedQuestions && planningData.selectedQuestions.length > 0)
  
  if (!hasData) {
    console.log('üìã Plan Context: NO planning data available')
    return ''
  }
  
  let plan = `
üìã –£–¢–í–ï–†–ñ–î–ï–ù–ù–´–ô –ü–õ–ê–ù –î–û–ö–£–ú–ï–ù–¢–ê (${docType.toUpperCase()}):

üéØ –¢–ï–ú–ê: ${planningData.theme || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üë• –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø: ${planningData.targetAudience || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üéØ –¶–ï–õ–ò:
${planningData.goals.length > 0 ? planningData.goals.map((g, i) => `${i + 1}. ${g}`).join('\n') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üí¨ –ö–õ–Æ–ß–ï–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
${planningData.keyMessages.length > 0 ? planningData.keyMessages.map((m, i) => `${i + 1}. ${m}`).join('\n') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üé® –í–ò–ó–£–ê–õ–¨–ù–´–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø: ${planningData.visualPreferences || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: ${planningData.additionalNotes || '–ù–µ—Ç'}
`

  if (planningData.pageCount) {
    plan += `\nüìÑ –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–†–ê–ù–ò–¶: ${planningData.pageCount}\n`
  }

  if (planningData.selectedQuestions && planningData.selectedQuestions.length > 0) {
    plan += `\nüìã –û–¢–í–ï–¢–´ –ù–ê –ö–û–ù–ö–†–ï–¢–ù–´–ï –í–û–ü–†–û–°–´:\n`
    Object.entries(planningData.collectedAnswers).forEach(([question, answer], i) => {
      plan += `\n${i + 1}. ${question}\n   ‚ûú ${answer}\n`
    })
    console.log(`üìã Plan Context: ${Object.keys(planningData.collectedAnswers).length} questions answered`)
  }

  plan += `\n‚ö†Ô∏è –í–ê–ñ–ù–û: –°–ª–µ–¥—É–π –≠–¢–û–ú–£ –ø–ª–∞–Ω—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞!`
  
  console.log(`üìã Plan Context generated (${plan.length} chars):`, plan.substring(0, 200) + '...')
  
  return plan
}
