export interface UserIntent {
  action: 'create' | 'edit' | 'delete' | 'query'
  docType?: string
  quantity?: number
  subject?: string
  details?: string
}

export function recognizeIntent(message: string, currentDocType?: string): UserIntent {
  const lower = message.toLowerCase()
  
  const createWithQuantity = extractCreationWithQuantity(lower)
  if (createWithQuantity) {
    return createWithQuantity
  }
  
  if (isCreationCommand(lower)) {
    return {
      action: 'create',
      docType: currentDocType,
      subject: extractSubject(lower)
    }
  }
  
  if (isEditCommand(lower)) {
    return {
      action: 'edit',
      subject: extractSubject(lower),
      details: extractEditDetails(lower)
    }
  }
  
  if (isDeletionCommand(lower)) {
    return {
      action: 'delete',
      subject: extractSubject(lower)
    }
  }
  
  return {
    action: 'query',
    details: message
  }
}

function extractCreationWithQuantity(message: string): UserIntent | null {
  const patterns = [
    /(—Å–¥–µ–ª–∞–π|—Å–æ–∑–¥–∞–π|—Å–≥–µ–Ω–µ—Ä–∏|–Ω–∞—Ä–∏—Å—É–π|–ø–æ–∫–∞–∂–∏)\s+(\d+)\s+(–ª–æ–≥–æ|–∏–∑–æ–±—Ä–∞–∂|–∫–∞—Ä—Ç–∏–Ω|–≤–∞—Ä–∏–∞–Ω—Ç|—Ñ–æ—Ç–æ|–¥–∏–∑–∞–π–Ω)/i,
    /(\d+)\s+(–ª–æ–≥–æ|–∏–∑–æ–±—Ä–∞–∂|–∫–∞—Ä—Ç–∏–Ω|–≤–∞—Ä–∏–∞–Ω—Ç|—Ñ–æ—Ç–æ|–¥–∏–∑–∞–π–Ω)/i,
    /(–æ–¥–∏–Ω|–æ–¥–Ω—É|–æ–¥–Ω–æ|–¥–≤–∞|–¥–≤–µ|—Ç—Ä–∏|—á–µ—Ç—ã—Ä–µ|–ø—è—Ç—å|—à–µ—Å—Ç—å|—Å–µ–º—å|–≤–æ—Å–µ–º—å|–¥–µ–≤—è—Ç—å|–¥–µ—Å—è—Ç—å)\s+(–ª–æ–≥–æ|–∏–∑–æ–±—Ä–∞–∂|–∫–∞—Ä—Ç–∏–Ω|–≤–∞—Ä–∏–∞–Ω—Ç|—Ñ–æ—Ç–æ|–¥–∏–∑–∞–π–Ω)/i,
  ]
  
  for (const pattern of patterns) {
    const match = message.match(pattern)
    if (match) {
      let quantity: number
      if (match[2] && /^\d+$/.test(match[2])) {
        quantity = parseInt(match[2])
      } else if (match[1] && /^\d+$/.test(match[1])) {
        quantity = parseInt(match[1])
      } else {
        quantity = textToNumber(match[1] || match[2])
      }
      
      const subjectMatch = match[3] || match[2] || match[1]
      const subject = normalizeSubject(subjectMatch)
      
      return {
        action: 'create',
        quantity,
        subject,
        details: message
      }
    }
  }
  
  return null
}

function isCreationCommand(message: string): boolean {
  const creationVerbs = [
    '—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏', '–Ω–∞—Ä–∏—Å—É–π', 
    '–ø–æ–∫–∞–∂–∏', '–ø–æ—Å—Ç—Ä–æ–π', '—Å–æ—Å—Ç–∞–≤—å', '–Ω–∞–ø–∏—à–∏'
  ]
  
  const creationObjects = [
    '–∫–ø', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', 
    '—Å—á—ë—Ç', '—Å—á–µ—Ç', '–∏–Ω–≤–æ–π—Å',
    '–ø–∏—Å—å–º–æ', 'email', '—Ä–∞—Å—Å—ã–ª–∫—É',
    '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é', '—Å–ª–∞–π–¥—ã',
    '–ª–æ–≥–æ—Ç–∏–ø', '–ª–æ–≥–æ',
    '–∫–∞—Ä—Ç–æ—á–∫—É', '—Ç–æ–≤–∞—Ä',
    '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ñ–∞–π–ª'
  ]
  
  for (const verb of creationVerbs) {
    if (message.includes(verb)) {
      if (creationObjects.some(obj => message.includes(obj))) {
        return true
      }
      if (!hasEditContext(message)) {
        return true
      }
    }
  }
  
  return false
}

function isEditCommand(message: string): boolean {
  const editKeywords = [
    '–∏–∑–º–µ–Ω–∏', '–ø–æ–º–µ–Ω—è–π', '–∑–∞–º–µ–Ω–∏',
    '—É–≤–µ–ª–∏—á—å', '—É–º–µ–Ω—å—à–∏',
    '—Ä–∞—Å–∫—Ä–∞—Å—å', '–ø–æ–∫—Ä–∞—Å—å',
    '–≤—ã–¥–µ–ª–∏',
    '–∂–∏—Ä–Ω—ã–º', '–∫—É—Ä—Å–∏–≤–æ–º', '–ø–æ–¥—á–µ—Ä–∫–Ω–∏',
    ' —Ü–≤–µ—Ç', ' —Ä–∞–∑–º–µ—Ä', ' —à—Ä–∏—Ñ—Ç',
    '–æ—Ç—Å—Ç—É–ø', '—Ç–µ–Ω—å',
    '—Å—é–¥–∞', '—Ç—É–¥–∞', '–∑–¥–µ—Å—å'
  ]
  
  const editContexts = [
    /—Å–¥–µ–ª–∞–π\s+(—ç—Ç–æ|–µ—ë|–µ–≥–æ|–∏—Ö)\s+(–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ|–∂–∏—Ä–Ω—ã–º|–∫—Ä–∞—Å–Ω—ã–º|—Å–∏–Ω–∏–º)/i,
    /—Å–¥–µ–ª–∞–π\s+\w+\s+(–∂–∏—Ä–Ω—ã–º|–∫—Ä–∞—Å–Ω—ã–º|—Å–∏–Ω–∏–º|–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ)/i,
  ]
  
  if (editContexts.some(pattern => pattern.test(message))) {
    return true
  }
  
  return editKeywords.some(keyword => message.includes(keyword))
}

function hasEditContext(message: string): boolean {
  const editContextMarkers = [
    /—Å–¥–µ–ª–∞–π\s+(—ç—Ç–æ|–µ—ë|–µ–≥–æ|–∏—Ö|—Ç—É—Ç|—Ç–∞–º|–∑–¥–µ—Å—å)/i,
    /(–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ|–∂–∏—Ä–Ω—ã–º|–∫—Ä–∞—Å–Ω—ã–º|—Å–∏–Ω–∏–º|–∑–µ–ª–µ–Ω—ã–º|–∂–µ–ª—Ç—ã–º)/i,
    /(—Ü–≤–µ—Ç|—Ä–∞–∑–º–µ—Ä|—à—Ä–∏—Ñ—Ç)/i,
  ]
  
  return editContextMarkers.some(pattern => pattern.test(message))
}

function isDeletionCommand(message: string): boolean {
  const deleteKeywords = ['—É–±–µ—Ä–∏', '—É–¥–∞–ª–∏', '–æ—á–∏—Å—Ç–∏', '—Å–æ—Ç—Ä–∏', '–≤—ã–∫–∏–Ω—å']
  return deleteKeywords.some(keyword => message.includes(keyword))
}

function extractSubject(message: string): string {
  const subjects: Record<string, string> = {
    '–∫–ø': 'proposal',
    '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ': 'proposal',
    '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': 'proposal',
    '—Å—á—ë—Ç': 'invoice',
    '—Å—á–µ—Ç': 'invoice',
    '–∏–Ω–≤–æ–π—Å': 'invoice',
    '–ø–∏—Å—å–º–æ': 'email',
    'email': 'email',
    '—Ä–∞—Å—Å—ã–ª–∫—É': 'email',
    '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é': 'presentation',
    '—Å–ª–∞–π–¥—ã': 'presentation',
    '–ª–æ–≥–æ—Ç–∏–ø': 'logo',
    '–ª–æ–≥–æ': 'logo',
    '–∫–∞—Ä—Ç–æ—á–∫—É': 'product-card',
    '—Ç–æ–≤–∞—Ä': 'product-card'
  }
  
  for (const [key, value] of Object.entries(subjects)) {
    if (message.includes(key)) {
      return value
    }
  }
  
  return ''
}

function extractEditDetails(message: string): string {
  const details = message
    .replace(/(–∏–∑–º–µ–Ω–∏|–ø–æ–º–µ–Ω—è–π|–∑–∞–º–µ–Ω–∏|—É–±–µ—Ä–∏|—É–¥–∞–ª–∏|—É–≤–µ–ª–∏—á—å|—É–º–µ–Ω—å—à–∏)/gi, '')
    .trim()
  
  return details
}

function normalizeSubject(text: string): string {
  const lower = text.toLowerCase()
  
  if (/–ª–æ–≥–æ/i.test(lower)) return 'logo'
  if (/–∏–∑–æ–±—Ä–∞–∂|–∫–∞—Ä—Ç–∏–Ω|—Ñ–æ—Ç–æ/i.test(lower)) return 'image'
  if (/–≤–∞—Ä–∏–∞–Ω—Ç|–¥–∏–∑–∞–π–Ω/i.test(lower)) return 'variant'
  
  return text
}

function textToNumber(text: string): number {
  const numbers: Record<string, number> = {
    '–æ–¥–∏–Ω': 1, '–æ–¥–Ω–∞': 1, '–æ–¥–Ω–æ': 1, '–æ–¥–Ω—É': 1,
    '–¥–≤–∞': 2, '–¥–≤–µ': 2,
    '—Ç—Ä–∏': 3, '—Ç—Ä—ë—Ö': 3, '—Ç—Ä–µ—Ö': 3,
    '—á–µ—Ç—ã—Ä–µ': 4,
    '–ø—è—Ç—å': 5,
    '—à–µ—Å—Ç—å': 6,
    '—Å–µ–º—å': 7,
    '–≤–æ—Å–µ–º—å': 8,
    '–¥–µ–≤—è—Ç—å': 9,
    '–¥–µ—Å—è—Ç—å': 10
  }
  
  return numbers[text.toLowerCase()] || 1
}

export function extractQuantity(message: string, defaultCount: number = 3): number {
  const intent = extractCreationWithQuantity(message.toLowerCase())
  if (intent && intent.quantity) {
    console.log(`üìä User requested ${intent.quantity} images (extracted from intent recognition)`)
    return intent.quantity
  }
  
  const digitPatterns = [
    /(\d+)\s*(–∏–∑–æ–±—Ä–∞–∂|–∫–∞—Ä—Ç–∏–Ω|—Ñ–æ—Ç–æ|–≤–∞—Ä–∏–∞–Ω—Ç|–ª–æ–≥–æ|—Ñ–æ—Ç–∫)/i,
    /(—Å–¥–µ–ª–∞–π|—Å–æ–∑–¥–∞–π|—Å–≥–µ–Ω–µ—Ä–∏|–Ω–∞—Ä–∏—Å—É–π)\s+(\d+)/i,
  ]
  
  for (const pattern of digitPatterns) {
    const match = message.match(pattern)
    if (match) {
      const numStr = match[2] && /^\d+$/.test(match[2]) ? match[2] : match[1]
      const num = parseInt(numStr)
      if (num > 0 && num <= 10) {
        console.log(`üìä User requested ${num} images (extracted from digit pattern)`)
        return num
      }
    }
  }
  
  const textPattern = /(–æ–¥–∏–Ω|–æ–¥–Ω—É|–æ–¥–Ω–æ|–¥–≤–∞|–¥–≤–µ|—Ç—Ä–∏|—á–µ—Ç—ã—Ä–µ|–ø—è—Ç—å|—à–µ—Å—Ç—å|—Å–µ–º—å|–≤–æ—Å–µ–º—å|–¥–µ–≤—è—Ç—å|–¥–µ—Å—è—Ç—å)\s*(–∏–∑–æ–±—Ä–∞–∂|–∫–∞—Ä—Ç–∏–Ω|—Ñ–æ—Ç–æ|–≤–∞—Ä–∏–∞–Ω—Ç|–ª–æ–≥–æ)/i
  const textMatch = message.match(textPattern)
  if (textMatch) {
    const num = textToNumber(textMatch[1])
    console.log(`üìä User requested ${num} images (extracted from text pattern)`)
    return num
  }
  
  console.log(`üìä Using default count: ${defaultCount}`)
  return defaultCount
}

