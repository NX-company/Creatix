import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth-options'
import { prisma } from '@/lib/db'

/**
 * POST /api/balance/buy-generations
 * –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–∞ (15‚ÇΩ/–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
 * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ ADVANCED
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { count } = await request.json()

    if (!count || count <= 0) {
      return NextResponse.json({ error: 'Invalid count' }, { status: 400 })
    }

    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      select: {
        id: true,
        appMode: true,
        balance: true,
        purchasedGenerations: true,
        subscriptionEndsAt: true,
      },
    })

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞
    if (user.appMode !== 'ADVANCED') {
      return NextResponse.json(
        {
          error: '–ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ ADVANCED',
          message: '–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ADVANCED –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
        },
        { status: 403 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const now = new Date()
    if (!user.subscriptionEndsAt || user.subscriptionEndsAt < now) {
      return NextResponse.json(
        {
          error: '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞',
          message: '–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ADVANCED –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
          subscriptionExpired: true,
        },
        { status: 403 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (15‚ÇΩ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
    const pricePerGeneration = 15
    const totalCost = count * pricePerGeneration

    if (user.balance < totalCost) {
      return NextResponse.json(
        {
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
          required: totalCost,
          available: user.balance,
          message: `–¢—Ä–µ–±—É–µ—Ç—Å—è ${totalCost}‚ÇΩ, –¥–æ—Å—Ç—É–ø–Ω–æ ${user.balance}‚ÇΩ`,
        },
        { status: 403 }
      )
    }

    // –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    const newBalance = user.balance - totalCost
    const newPurchasedGenerations = user.purchasedGenerations + count

    await prisma.user.update({
      where: { id: user.id },
      data: {
        balance: newBalance,
        purchasedGenerations: newPurchasedGenerations,
      },
    })

    console.log(
      `üí≥ [BUY GENERATIONS] User ${session.user.email} bought ${count} generations for ${totalCost}‚ÇΩ. Balance: ${user.balance}‚ÇΩ ‚Üí ${newBalance}‚ÇΩ, Purchased: ${user.purchasedGenerations} ‚Üí ${newPurchasedGenerations}`
    )

    return NextResponse.json({
      success: true,
      count,
      totalCost,
      newBalance,
      newPurchasedGenerations,
      pricePerGeneration,
    })
  } catch (error) {
    console.error('Buy generations error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
