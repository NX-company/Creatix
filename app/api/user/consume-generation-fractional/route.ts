import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth-options'
import { prisma } from '@/lib/db'

/**
 * POST /api/user/consume-generation-fractional
 * –°–ø–∏—Å—ã–≤–∞–µ—Ç –¥—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1, 0.3, 1.5)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ = 0.1 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { amount, reason } = await request.json()

    if (!amount || amount <= 0) {
      return NextResponse.json({ error: 'Invalid amount' }, { status: 400 })
    }

    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      select: {
        id: true,
        appMode: true,
        freeMonthlyGenerations: true,
        advancedMonthlyGenerations: true,
        purchasedGenerations: true,
        generationLimit: true,
        subscriptionEndsAt: true,
      },
    })

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const now = new Date()
    const isFreeMode = user.appMode === 'FREE'
    const isAdvancedMode = user.appMode === 'ADVANCED'

    // === FREE –†–ï–ñ–ò–ú ===
    if (isFreeMode) {
      // –í FREE —Ä–µ–∂–∏–º–µ –∑–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ–æ–±—â–µ)
      return NextResponse.json(
        {
          error: '–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ FREE —Ä–µ–∂–∏–º–µ',
          message: '–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ADVANCED –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
        },
        { status: 403 }
      )
    }

    // === ADVANCED –†–ï–ñ–ò–ú ===
    if (isAdvancedMode) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      if (!user.subscriptionEndsAt || user.subscriptionEndsAt < now) {
        return NextResponse.json(
          {
            error: '–ü–æ–¥–ø–∏—Å–∫–∞ ADVANCED –∏—Å—Ç–µ–∫–ª–∞',
            message: '–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
            subscriptionExpired: true,
          },
          { status: 403 }
        )
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
      const usedFromSubscription = user.advancedMonthlyGenerations
      const availableFromSubscription = 80 - usedFromSubscription
      const availablePurchased = user.purchasedGenerations

      const totalAvailable = availableFromSubscription + availablePurchased

      if (totalAvailable < amount) {
        return NextResponse.json(
          {
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
            needed: amount,
            available: totalAvailable,
            message: `–¢—Ä–µ–±—É–µ—Ç—Å—è ${amount.toFixed(1)} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω–æ ${totalAvailable.toFixed(1)}`,
          },
          { status: 403 }
        )
      }

      // –°–ø–∏—Å–∞–Ω–∏–µ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º –∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö)
      let newAdvancedMonthlyGenerations = usedFromSubscription
      let newPurchasedGenerations = availablePurchased
      let fromSubscription = 0
      let fromPurchased = 0

      if (availableFromSubscription >= amount) {
        // –¢—Ä–∞—Ç–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        newAdvancedMonthlyGenerations += amount
        fromSubscription = amount
      } else {
        // –¢—Ä–∞—Ç–∏–º —á–∞—Å—Ç–∏—á–Ω–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
        fromSubscription = availableFromSubscription
        fromPurchased = amount - availableFromSubscription
        newAdvancedMonthlyGenerations += fromSubscription
        newPurchasedGenerations -= fromPurchased
      }

      await prisma.user.update({
        where: { id: user.id },
        data: {
          advancedMonthlyGenerations: newAdvancedMonthlyGenerations,
          purchasedGenerations: newPurchasedGenerations,
        },
      })

      const newAvailableFromSubscription = 80 - newAdvancedMonthlyGenerations
      const totalRemaining = newAvailableFromSubscription + newPurchasedGenerations

      console.log(
        `üí∞ [ADVANCED] Consumed ${amount.toFixed(1)}: ${reason || 'N/A'}, subscription=${newAdvancedMonthlyGenerations.toFixed(1)}/80, purchased=${newPurchasedGenerations.toFixed(1)}, remaining=${totalRemaining.toFixed(1)}`
      )

      return NextResponse.json({
        success: true,
        consumed: amount,
        remainingGenerations: totalRemaining,
        fromSubscription,
        fromPurchased,
      })
    }

    // Fallback
    return NextResponse.json({ error: 'Invalid app mode' }, { status: 400 })
  } catch (error) {
    console.error('Consume fractional generation error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
