import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth-options'
import { prisma } from '@/lib/db'
import { shouldResetGenerations, calculateGenerationCost } from '@/lib/generationLimits'

/**
 * POST /api/user/consume-generation
 * –°–ø–∏—Å—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏:
 * - FREE: 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π/–º–µ—Å—è—Ü, –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * - ADVANCED: 80 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ + –∫—É–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–ø. –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (15‚ÇΩ/—à—Ç)
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { imageCount = 10 } = await request.json()

    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      select: {
        id: true,
        appMode: true,
        freeMonthlyGenerations: true,
        advancedMonthlyGenerations: true,
        purchasedGenerations: true,
        generationLimit: true,
        lastResetDate: true,
        subscriptionEndsAt: true,
      },
    })

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const now = new Date()
    const isFreeMode = user.appMode === 'FREE'
    const isAdvancedMode = user.appMode === 'ADVANCED'

    // === FREE –†–ï–ñ–ò–ú ===
    if (isFreeMode) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
      if (user.freeMonthlyGenerations >= 10) {
        return NextResponse.json(
          {
            error: '–õ–∏–º–∏—Ç FREE —Ä–µ–∂–∏–º–∞ –∏—Å—á–µ—Ä–ø–∞–Ω',
            message: '–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ADVANCED –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
            availableGenerations: 0,
          },
          { status: 403 }
        )
      }

      // –°–ø–∏—Å–∞–Ω–∏–µ
      const newFreeMonthlyGenerations = user.freeMonthlyGenerations + 1

      await prisma.user.update({
        where: { id: user.id },
        data: {
          freeMonthlyGenerations: newFreeMonthlyGenerations,
        },
      })

      const remaining = 10 - newFreeMonthlyGenerations

      console.log(`üí∞ [FREE] Consumed 1: used=${newFreeMonthlyGenerations}/10, remaining=${remaining}`)

      return NextResponse.json({
        success: true,
        consumedGenerations: 1,
        remainingGenerations: remaining,
        fromFree: 1,
        fromSubscription: 0,
        fromPurchased: 0,
      })
    }

    // === ADVANCED –†–ï–ñ–ò–ú ===
    if (isAdvancedMode) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      if (!user.subscriptionEndsAt || user.subscriptionEndsAt < now) {
        return NextResponse.json(
          {
            error: '–ü–æ–¥–ø–∏—Å–∫–∞ ADVANCED –∏—Å—Ç–µ–∫–ª–∞',
            message: '–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
            subscriptionExpired: true,
          },
          { status: 403 }
        )
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
      const usedFromSubscription = user.advancedMonthlyGenerations
      const availableFromSubscription = 80 - usedFromSubscription
      const availablePurchased = user.purchasedGenerations

      const totalAvailable = availableFromSubscription + availablePurchased

      if (totalAvailable < 1) {
        return NextResponse.json(
          {
            error: '–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
            message: '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å (15‚ÇΩ/–≥–µ–Ω–µ—Ä–∞—Ü–∏—è) –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
            availableGenerations: 0,
          },
          { status: 403 }
        )
      }

      // –°–ø–∏—Å–∞–Ω–∏–µ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º –∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö)
      let newAdvancedMonthlyGenerations = usedFromSubscription
      let newPurchasedGenerations = availablePurchased
      let fromSubscription = 0
      let fromPurchased = 0

      if (availableFromSubscription >= 1) {
        // –¢—Ä–∞—Ç–∏–º –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        newAdvancedMonthlyGenerations += 1
        fromSubscription = 1
      } else {
        // –¢—Ä–∞—Ç–∏–º –∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
        newPurchasedGenerations -= 1
        fromPurchased = 1
      }

      await prisma.user.update({
        where: { id: user.id },
        data: {
          advancedMonthlyGenerations: newAdvancedMonthlyGenerations,
          purchasedGenerations: newPurchasedGenerations,
        },
      })

      const newAvailableFromSubscription = 80 - newAdvancedMonthlyGenerations
      const totalRemaining = newAvailableFromSubscription + newPurchasedGenerations

      console.log(
        `üí∞ [ADVANCED] Consumed 1: subscription=${newAdvancedMonthlyGenerations}/80, purchased=${newPurchasedGenerations.toFixed(1)}, remaining=${totalRemaining.toFixed(1)}`
      )

      const costInfo = calculateGenerationCost(imageCount)

      return NextResponse.json({
        success: true,
        consumedGenerations: 1,
        remainingGenerations: totalRemaining,
        fromFree: 0,
        fromSubscription,
        fromPurchased,
        costInfo,
      })
    }

    // Fallback (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
    return NextResponse.json({ error: 'Invalid app mode' }, { status: 400 })
  } catch (error) {
    console.error('Consume generation error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
