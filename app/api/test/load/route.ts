/**
 * Load Testing API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * POST /api/test/load
 * Body: { "requests": 10, "delay": 100 }
 */

import { NextRequest, NextResponse } from 'next/server'
import { getRequestManager } from '@/lib/requestManager'

export const maxDuration = 300 // 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

export async function POST(request: NextRequest) {
  try {
    const { requests = 10, delay = 100 } = await request.json()

    if (requests > 100) {
      return NextResponse.json(
        { error: 'Maximum 100 requests per test' },
        { status: 400 }
      )
    }

    const requestManager = getRequestManager()
    const startTime = Date.now()

    console.log(`üß™ Starting load test: ${requests} requests`)

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const promises: Promise<any>[] = []

    for (let i = 0; i < requests; i++) {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
      if (delay > 0 && i > 0) {
        await new Promise((resolve) => setTimeout(resolve, delay))
      }

      const promise = requestManager
        .openrouterRequest({
          model: 'google/gemini-2.5-flash-lite',
          messages: [
            {
              role: 'user',
              content: `–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (10-15 —Å–ª–æ–≤) –Ω–∞ —Ç–µ–º—É: "–¢–µ—Å—Ç ${i + 1}"`,
            },
          ],
          temperature: 0.7,
          max_tokens: 100,
          priority: 5,
        })
        .then((result) => ({
          index: i,
          success: true,
          length: result.content.length,
          model: result.model,
        }))
        .catch((error) => ({
          index: i,
          success: false,
          error: error.message,
        }))

      promises.push(promise)
    }

    console.log(`‚è≥ Waiting for ${promises.length} requests to complete...`)

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const results = await Promise.all(promises)

    const endTime = Date.now()
    const totalTime = endTime - startTime

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successful = results.filter((r) => r.success).length
    const failed = results.filter((r) => !r.success).length
    const avgTimePerRequest = totalTime / requests

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = requestManager.getStats()
    const capacity = requestManager.getCapacity()

    const summary = {
      test: {
        totalRequests: requests,
        successful,
        failed,
        totalTime: `${totalTime}ms`,
        avgTimePerRequest: `${Math.round(avgTimePerRequest)}ms`,
        requestsPerSecond: Math.round((requests / totalTime) * 1000),
      },
      systemStats: {
        queue: stats.queue,
        keyPool: stats.keyPool,
        capacity,
      },
      results: results.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }

    console.log(`‚úÖ Load test completed:`)
    console.log(`   Total: ${requests} requests`)
    console.log(`   Successful: ${successful}`)
    console.log(`   Failed: ${failed}`)
    console.log(`   Total time: ${totalTime}ms`)
    console.log(`   Avg per request: ${Math.round(avgTimePerRequest)}ms`)
    console.log(`   Requests/sec: ${summary.test.requestsPerSecond}`)

    return NextResponse.json(summary)
  } catch (error) {
    console.error('Load test error:', error)
    return NextResponse.json(
      {
        error: 'Load test failed',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    )
  }
}

/**
 * GET –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
 */
export async function GET(request: NextRequest) {
  try {
    const requestManager = getRequestManager()
    const stats = requestManager.getStats()
    const capacity = requestManager.getCapacity()
    const isHealthy = requestManager.isHealthy()

    return NextResponse.json({
      healthy: isHealthy,
      stats,
      capacity,
    })
  } catch (error) {
    console.error('Get stats error:', error)
    return NextResponse.json(
      {
        error: 'Failed to get stats',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    )
  }
}

