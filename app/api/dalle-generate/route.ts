import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { HttpsProxyAgent } from 'https-proxy-agent'

export const maxDuration = 60

export async function POST(request: NextRequest) {
  try {
    const { prompt } = await request.json()

    if (!prompt) {
      console.error('‚ùå No prompt provided')
      return NextResponse.json({ error: 'Prompt required' }, { status: 400 })
    }

    const apiKey = process.env.OPENAI_API_KEY
    if (!apiKey) {
      console.error('‚ùå OpenAI API key not configured')
      return NextResponse.json({ error: 'OpenAI API key not configured' }, { status: 500 })
    }

    const proxyHost = process.env.PROXY_HOST
    const proxyPort = process.env.PROXY_PORT
    const proxyLogin = process.env.PROXY_LOGIN
    const proxyPassword = process.env.PROXY_PASSWORD

    const useProxy = proxyHost && proxyPort && proxyLogin && proxyPassword

    console.log(`üé® DALL-E 3: Starting generation${useProxy ? ' via proxy' : ''}...`)
    if (useProxy) {
      console.log(`   Proxy: ${proxyHost}:${proxyPort}`)
    }
    console.log(`   Prompt: "${prompt.substring(0, 100)}..."`)

    // Prepare optional proxy agent (reuse for API client and image download)
    let agent: any | undefined
    let client: OpenAI

    if (useProxy) {
      const proxyUrl = `http://${proxyLogin}:${proxyPassword}@${proxyHost}:${proxyPort}`
      agent = new HttpsProxyAgent(proxyUrl)
      client = new OpenAI({
        apiKey: apiKey,
        httpAgent: agent as any,
      })
    } else {
      client = new OpenAI({
        apiKey: apiKey,
      })
    }

    console.log(`üì° Calling OpenAI DALL-E 3 API through proxy...`)
    
    const response = await client.images.generate({
      model: 'dall-e-3',
      prompt: prompt,
      n: 1,
      size: '1024x1024',
      quality: 'hd',
      response_format: 'url',
    })

    if (!response.data || response.data.length === 0) {
      console.error('‚ùå No data in DALL-E response')
      throw new Error('No image generated by DALL-E')
    }

    const imageUrl = response.data[0]?.url

    if (!imageUrl) {
      console.error('‚ùå No image URL in DALL-E response')
      throw new Error('No image generated by DALL-E')
    }

    console.log(`‚úÖ Got image URL from DALL-E: ${imageUrl.substring(0, 50)}...`)
    console.log(`‚¨áÔ∏è  Downloading image...`)

    const imageResponse = agent ? await fetch(imageUrl, { agent } as any) : await fetch(imageUrl)
    
    if (!imageResponse.ok) {
      throw new Error(`Failed to download image: ${imageResponse.status}`)
    }

    const imageBuffer = await imageResponse.arrayBuffer()
    console.log(`‚úÖ Downloaded ${imageBuffer.byteLength} bytes`)

    const base64 = Buffer.from(imageBuffer).toString('base64')
    const dataUrl = `data:image/png;base64,${base64}`

    console.log(`‚úÖ DALL-E 3 generation complete`)

    return NextResponse.json({
      success: true,
      imageUrl: dataUrl,
      originalUrl: imageUrl,
    })
  } catch (error) {
    console.error('‚ùå DALL-E generation error:', error)
    console.error('Error details:', {
      message: error instanceof Error ? error.message : 'Unknown',
      stack: error instanceof Error ? error.stack : undefined,
      type: typeof error,
    })

    return NextResponse.json(
      {
        error: 'DALL-E generation failed',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    )
  }
}
