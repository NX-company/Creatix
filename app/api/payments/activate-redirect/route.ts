import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth-options'
import { prisma } from '@/lib/db'

/**
 * GET /api/payments/activate-redirect
 * Server-Side Redirect endpoint –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 *
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–æ—á–∫–∞ –ë–∞–Ω–∫–æ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
 * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ payment-success
 */
export async function GET(request: NextRequest) {
  try {
    console.log('üöÄ Server-side activation redirect received')

    // –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      console.log('‚ö†Ô∏è  No session found, redirecting to payment-success with error')
      return NextResponse.redirect(
        new URL('/payment-success?error=unauthorized', request.url)
      )
    }

    console.log(`üë§ User: ${session.user.email}`)

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
    })

    if (!user) {
      console.log('‚ùå User not found in database')
      return NextResponse.redirect(
        new URL('/payment-success?error=user_not_found', request.url)
      )
    }

    // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é PENDING —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–∏–ø–∞ SUBSCRIPTION
    const pendingTransaction = await prisma.transaction.findFirst({
      where: {
        userId: user.id,
        type: 'SUBSCRIPTION',
        status: 'PENDING',
      },
      orderBy: {
        createdAt: 'desc',
      },
    })

    if (!pendingTransaction) {
      console.log('‚ö†Ô∏è  No pending transaction found, redirecting anyway')
      return NextResponse.redirect(
        new URL('/payment-success?error=no_pending', request.url)
      )
    }

    console.log(`üí≥ Found pending transaction: ${pendingTransaction.id}`)

    // –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ metadata
    const metadata = pendingTransaction.metadata as any
    const targetMode = metadata?.targetMode || 'ADVANCED'
    const subscriptionDays = 30
    const generationsToAdd = 100

    console.log(`üéØ Activating ${targetMode} subscription...`)

    try {
      // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.$transaction([
        // –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        prisma.transaction.update({
          where: { id: pendingTransaction.id },
          data: {
            status: 'COMPLETED',
            updatedAt: new Date(),
          },
        }),
        // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prisma.user.update({
          where: { id: user.id },
          data: {
            appMode: targetMode as any, // 'ADVANCED'
            advancedGenerationsRemaining: {
              increment: generationsToAdd,
            },
            advancedGenerationsTotal: {
              increment: generationsToAdd,
            },
            subscriptionStatus: 'active',
            subscriptionStartedAt: new Date(),
            subscriptionEndsAt: new Date(Date.now() + subscriptionDays * 24 * 60 * 60 * 1000),
          },
        }),
      ])

      console.log('‚úÖ Subscription activated successfully!')
      console.log(`   User: ${user.email}`)
      console.log(`   Mode: ${targetMode}`)
      console.log(`   Generations: +${generationsToAdd}`)
      console.log(`   Duration: ${subscriptionDays} days`)

      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ payment-success —Å —Ñ–ª–∞–≥–æ–º —É—Å–ø–µ—Ö–∞
      return NextResponse.redirect(
        new URL('/payment-success?activated=true&mode=ADVANCED', request.url)
      )

    } catch (activationError) {
      console.error('‚ùå Error activating subscription:', activationError)

      // –î–∞–∂–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ success
      // Cron endpoint –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–∑–∂–µ
      return NextResponse.redirect(
        new URL('/payment-success?pending=true', request.url)
      )
    }

  } catch (error) {
    console.error('‚ùå Critical error in activate-redirect:', error)

    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ payment-success
    // –≠—Ç–æ –ª—É—á—à–µ —á–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É 500
    return NextResponse.redirect(
      new URL('/payment-success?error=server', request.url)
    )
  }
}
