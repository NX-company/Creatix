import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { createTochkaClient } from '@/lib/tochka'
import { GENERATION_LIMITS } from '@/lib/generationLimits'

/**
 * POST /api/payments/webhook
 * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üîî Webhook received from Tochka Bank')

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json()
    console.log('üì¶ Full webhook payload:', JSON.stringify(body, null, 2))

    // –§–æ—Ä–º–∞—Ç webhook –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    // https://developers.tochka.com/docs/pay-gateway/api/tokenization-decision-notification
    const {
      version,
      merchantSiteUid,
      event,
      createdAt,
      payloadType,
      payload,
    } = body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    if (event !== 'payment-updated') {
      console.log(`‚ÑπÔ∏è Webhook: Ignoring event type: ${event}`)
      return NextResponse.json({ success: true, message: 'Event ignored' })
    }

    if (payloadType !== 'payment') {
      console.log(`‚ÑπÔ∏è Webhook: Ignoring payload type: ${payloadType}`)
      return NextResponse.json({ success: true, message: 'Payload type ignored' })
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload
    const {
      paymentUid,      // –≠—Ç–æ operationId –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
      orderUid,
      amount: paymentAmount,
      status: paymentStatus,
      metadata,
    } = payload

    const operationId = paymentUid
    const status = paymentStatus?.value // COMPLETED, AUTHORIZED, DECLINED, CANCELLED
    const amount = paymentAmount?.amount ? parseFloat(paymentAmount.amount) : null

    console.log('üì¶ Webhook data:', {
      event,
      operationId,
      status,
      amount,
      orderUid,
      createdAt,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!operationId || !status) {
      console.error('‚ùå Missing required fields in webhook')
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ operationId
    const transaction = await prisma.transaction.findFirst({
      where: {
        metadata: {
          path: ['operationId'],
          equals: operationId,
        },
      },
      include: {
        user: true,
      },
    })

    if (!transaction) {
      console.error(`‚ùå Transaction not found for operationId: ${operationId}`)
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if (transaction.status === 'COMPLETED') {
      console.log(`‚ö†Ô∏è  Transaction already processed: ${operationId}`)
      return NextResponse.json(
        { success: true, message: 'Already processed' },
        { status: 200 }
      )
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    // –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å—ã: COMPLETED, AUTHORIZED, DECLINED, CANCELLED, EXPIRED
    // –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ = COMPLETED –∏–ª–∏ AUTHORIZED
    if (status === 'COMPLETED' || status === 'AUTHORIZED') {
      console.log(`‚úÖ Payment successful: ${operationId}`)

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
      const metadata = transaction.metadata as any
      const expectedAmount = transaction.amount
      const actualAmount = parseFloat(amount?.toString() || '0')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º–æ–π
      if (Math.abs(actualAmount - expectedAmount) > 0.01) {
        console.error('‚ùå SECURITY ALERT: Payment amount mismatch!', {
          expected: expectedAmount,
          actual: actualAmount,
          operationId,
          userId: transaction.userId,
        })

        // –ü–æ–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é –∏ –ù–ï –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await prisma.transaction.update({
          where: { id: transaction.id },
          data: {
            status: 'FAILED',
            metadata: {
              ...metadata,
              securityError: 'Amount mismatch',
              expectedAmount,
              actualAmount,
            }
          },
        })

        return NextResponse.json(
          { error: 'Payment amount mismatch' },
          { status: 400 }
        )
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await prisma.transaction.update({
        where: { id: transaction.id },
        data: { status: 'COMPLETED' },
      })

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
      if (transaction.type === 'SUBSCRIPTION') {
        // –ê–ø–≥—Ä–µ–π–¥ –ø–æ–¥–ø–∏—Å–∫–∏
        const targetMode = metadata?.targetMode

        if (!targetMode || (targetMode !== 'ADVANCED' && targetMode !== 'PRO')) {
          console.error('‚ùå Invalid targetMode in transaction metadata')
          return NextResponse.json(
            { error: 'Invalid targetMode' },
            { status: 400 }
          )
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–æ–≤–Ω–æ 1 –º–µ—Å—è—Ü
        const subscriptionEndsAt = new Date()
        subscriptionEndsAt.setMonth(subscriptionEndsAt.getMonth() + 1)

        await prisma.user.update({
          where: { id: transaction.userId },
          data: {
            appMode: targetMode,
            generationLimit: GENERATION_LIMITS[targetMode],
            subscriptionEndsAt,
            monthlyGenerations: 0,
            bonusGenerations: 0,
            trialEndsAt: null,
          },
        })

        console.log(`‚úÖ User upgraded to ${targetMode}:`, {
          userId: transaction.userId,
          subscriptionEndsAt,
        })

      } else if (transaction.type === 'BONUS_PACK') {
        console.log(`üéÅ Webhook: Processing BONUS_PACK payment`)

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ bonusGenerations –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const userBefore = await prisma.user.findUnique({
          where: { id: transaction.userId },
          select: { bonusGenerations: true, subscriptionEndsAt: true },
        })
        console.log(`üìä Webhook: User before update:`, {
          userId: transaction.userId,
          email: transaction.user.email,
          bonusGenerations: userBefore?.bonusGenerations,
          subscriptionEndsAt: userBefore?.subscriptionEndsAt,
        })

        // –ü–æ–∫—É–ø–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –ø–∞–∫–∞ - –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –º–µ—Å—è—Ü
        const bonusEndsAt = new Date()
        bonusEndsAt.setMonth(bonusEndsAt.getMonth() + 1)

        console.log(`üíæ Webhook: Updating user: adding +30 bonusGenerations`)
        const updatedUser = await prisma.user.update({
          where: { id: transaction.userId },
          data: {
            bonusGenerations: {
              increment: 30,
            },
            // –û–±–Ω–æ–≤–ª—è–µ–º subscriptionEndsAt –µ—Å–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –ø–∞–∫ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—Ä–æ–∫
            subscriptionEndsAt: bonusEndsAt,
          },
          select: { bonusGenerations: true, subscriptionEndsAt: true },
        })

        console.log(`‚úÖ Webhook: Bonus pack added for user:`, {
          userId: transaction.userId,
          email: transaction.user.email,
          bonusGenerationsBefore: userBefore?.bonusGenerations,
          bonusGenerationsAfter: updatedUser.bonusGenerations,
          actualIncrement: (updatedUser.bonusGenerations || 0) - (userBefore?.bonusGenerations || 0),
          expiresAt: bonusEndsAt,
        })
      }

    } else if (status === 'EXPIRED' || status === 'DECLINED' || status === 'CANCELLED') {
      console.log(`‚ùå Payment failed: ${operationId}, status: ${status}`)

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await prisma.transaction.update({
        where: { id: transaction.id },
        data: { status: 'FAILED' },
      })
    } else {
      console.log(`‚ÑπÔ∏è  Payment status: ${status} for operationId: ${operationId}`)
      // –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã: –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º PENDING
    }

    return NextResponse.json(
      { success: true },
      { status: 200 }
    )

  } catch (error) {
    console.error('‚ùå Error processing webhook:', error)
    return NextResponse.json(
      {
        error: 'Failed to process webhook',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * GET /api/payments/webhook
 * –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint'–∞
 */
export async function GET() {
  return NextResponse.json({
    status: 'ok',
    message: 'Tochka Bank webhook endpoint is ready',
  })
}
