import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth-options'
import { createTochkaClient } from '@/lib/tochka'
import { SUBSCRIPTION_PRICES, BONUS_PACK_PRICE } from '@/lib/generationLimits'
import { prisma } from '@/lib/db'

/**
 * POST /api/payments/create-payment
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¢–æ—á–∫–∞ –ë–∞–Ω–∫
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const session = await getServerSession(authOptions)
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json()
    const {
      paymentType, // 'subscription' –∏–ª–∏ 'bonus_pack'
      targetMode,  // 'ADVANCED' –∏–ª–∏ 'PRO' (–¥–ª—è subscription)
    } = body

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!paymentType) {
      return NextResponse.json(
        { error: 'Missing paymentType' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
    })

    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    let amount: number
    let purpose: string
    let paymentDescription: string

    if (paymentType === 'subscription') {
      if (!targetMode || (targetMode !== 'ADVANCED' && targetMode !== 'PRO')) {
        return NextResponse.json(
          { error: 'Invalid targetMode for subscription' },
          { status: 400 }
        )
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¶–µ–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã amount –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
      amount = SUBSCRIPTION_PRICES[targetMode as 'ADVANCED' | 'PRO']
      const modeText = targetMode === 'ADVANCED' ? 'ADVANCED' : 'PRO'
      purpose = `–ü–æ–¥–ø–∏—Å–∫–∞ Creatix ${modeText}`
      paymentDescription = `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ ${modeText}`

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ù–µ–ª—å–∑—è –∞–ø–≥—Ä–µ–π–¥–∏—Ç—å—Å—è –¥–æ —Ç–æ–≥–æ –∂–µ —Ä–µ–∂–∏–º–∞
      if (user.appMode === targetMode) {
        return NextResponse.json(
          { error: `You already have ${targetMode} subscription` },
          { status: 400 }
        )
      }

      console.log(`üí≥ Creating subscription payment for ${modeText}: ${amount}‚ÇΩ`)
    } else if (paymentType === 'bonus_pack') {
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¶–µ–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      amount = BONUS_PACK_PRICE
      purpose = '–ë–æ–Ω—É—Å–Ω—ã–π –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Creatix (+30 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)'
      paymentDescription = '–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π'

      console.log(`üí≥ Creating bonus pack payment: ${amount}‚ÇΩ`)

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ë–æ–Ω—É—Å–Ω—ã–µ –ø–∞–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
      if (user.appMode === 'FREE') {
        return NextResponse.json(
          { error: 'Bonus packs are only available for ADVANCED and PRO users' },
          { status: 403 }
        )
      }
    } else {
      return NextResponse.json(
        { error: 'Invalid paymentType' },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¢–æ—á–∫–∞ –ë–∞–Ω–∫–∞
    const tochkaClient = createTochkaClient()

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'
    const successUrl = `${baseUrl}/payment-success?type=${paymentType}&mode=${targetMode || 'bonus'}`
    const failUrl = `${baseUrl}/payment-failure?type=${paymentType}`

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å —á–µ–∫–æ–º
    const paymentResult = await tochkaClient.createPaymentWithReceipt({
      amount,
      customerCode: process.env.TOCHKA_CUSTOMER_CODE || '',
      purpose,
      paymentMode: ['card', 'sbp'], // –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –ø–æ –°–ë–ü
      redirectUrl: successUrl,
      failRedirectUrl: failUrl,
      consumerId: user.id,
      ttl: 60, // –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 60 –º–∏–Ω—É—Ç
      client: {
        email: user.email,
      },
      items: [
        {
          name: paymentDescription,
          amount,
          quantity: 1,
        },
      ],
    })

    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { Data: { operationId, paymentLink, status, ... }, Links, Meta }
    const paymentData = paymentResult.Data

    if (!paymentData?.operationId || !paymentData?.paymentLink) {
      console.error('‚ùå Invalid payment response:', paymentResult)
      throw new Error('Invalid response from payment gateway')
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î (pending —Å—Ç–∞—Ç—É—Å)
    await prisma.transaction.create({
      data: {
        userId: user.id,
        amount,
        type: paymentType === 'subscription' ? 'SUBSCRIPTION' : 'BONUS_PACK',
        status: 'PENDING',
        metadata: {
          operationId: paymentData.operationId, // operationId, –ù–ï paymentId
          targetMode: targetMode || null,
          paymentType,
        } as any,
      },
    })

    console.log('‚úÖ Payment link created:', {
      operationId: paymentData.operationId,
      amount,
      type: paymentType,
    })

    return NextResponse.json({
      success: true,
      paymentUrl: paymentData.paymentLink, // paymentLink, –ù–ï paymentUrl
      operationId: paymentData.operationId,
      amount,
      status: paymentData.status,
    })

  } catch (error) {
    console.error('‚ùå Error creating payment:', error)
    return NextResponse.json(
      {
        error: 'Failed to create payment',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}
