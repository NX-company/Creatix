import { NextRequest, NextResponse } from 'next/server'
import { getUserFromRequest } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { createTochkaClient } from '@/lib/tochka'
import { GENERATION_LIMITS } from '@/lib/generationLimits'

/**
 * POST /api/payments/activate-latest
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é PENDING —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ—ë
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –∫–æ–≥–¥–∞ operationId –Ω–µ –ø–µ—Ä–µ–¥–∞–ª—Å—è –≤ URL –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
 */
export async function POST(request: NextRequest) {
  try {
    const user = await getUserFromRequest(request)
    if (!user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    console.log(`üîç Looking for latest pending transaction for user: ${user.email}`)

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const dbUser = await prisma.user.findUnique({
      where: { email: user.email },
    })

    if (!dbUser) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é PENDING —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await prisma.transaction.findFirst({
      where: {
        userId: dbUser.id,
        status: 'PENDING',
      },
      orderBy: {
        createdAt: 'desc',
      },
    })

    if (!transaction) {
      console.log('‚ö†Ô∏è No pending transaction found')
      return NextResponse.json(
        { error: 'No pending transaction found' },
        { status: 404 }
      )
    }

    console.log(`‚úÖ Found pending transaction:`, {
      id: transaction.id,
      type: transaction.type,
      amount: transaction.amount,
      metadata: transaction.metadata,
    })

    // –ü–æ–ª—É—á–∞–µ–º operationId –∏–∑ metadata
    const metadata = transaction.metadata as any
    const operationId = metadata?.operationId

    if (!operationId) {
      console.error('‚ùå Transaction metadata missing operationId')
      return NextResponse.json(
        { error: 'Invalid transaction metadata' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Tochka API
    console.log(`üîç Checking payment status via Tochka API for operationId: ${operationId}`)
    const tochkaClient = createTochkaClient()

    let paymentInfo
    try {
      paymentInfo = await tochkaClient.getPaymentInfo(operationId)
    } catch (error) {
      console.error('‚ùå Failed to get payment info from Tochka:', error)
      return NextResponse.json(
        { error: 'Failed to verify payment status' },
        { status: 500 }
      )
    }

    console.log('üì• Tochka payment info:', paymentInfo)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    const paymentData = (paymentInfo as any)?.Data || paymentInfo
    const tochkaStatus = paymentData?.status
    if (tochkaStatus !== 'AUTHORIZED' && tochkaStatus !== 'CONFIRMED') {
      console.log(`‚è≥ Payment not yet completed. Status: ${tochkaStatus}`)
      return NextResponse.json(
        {
          error: 'Payment not completed',
          status: tochkaStatus
        },
        { status: 400 }
      )
    }

    console.log(`‚úÖ Payment confirmed by Tochka with status: ${tochkaStatus}`)

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const now = new Date()
    const subscriptionEnd = new Date()
    subscriptionEnd.setMonth(subscriptionEnd.getMonth() + 1)

    if (transaction.type === 'SUBSCRIPTION') {
      const targetMode = metadata.targetMode as 'ADVANCED'

      await prisma.$transaction([
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        prisma.transaction.update({
          where: { id: transaction.id },
          data: {
            status: 'COMPLETED',
            updatedAt: now,
          },
        }),
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prisma.user.update({
          where: { id: dbUser.id },
          data: {
            appMode: targetMode,
            subscriptionEndsAt: subscriptionEnd,
            generationLimit: GENERATION_LIMITS[targetMode],
            monthlyGenerations: 0,
            lastResetDate: now,
          },
        }),
      ])

      console.log(`‚úÖ Subscription activated: ${targetMode} until ${subscriptionEnd.toISOString()}`)

      return NextResponse.json({
        success: true,
        type: 'SUBSCRIPTION',
        targetMode,
        subscriptionEndsAt: subscriptionEnd,
      })

    } else if (transaction.type === 'BONUS_PACK') {
      await prisma.$transaction([
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        prisma.transaction.update({
          where: { id: transaction.id },
          data: {
            status: 'COMPLETED',
            updatedAt: now,
          },
        }),
        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        prisma.user.update({
          where: { id: dbUser.id },
          data: {
            bonusGenerations: {
              increment: 30,
            },
          },
        }),
      ])

      console.log(`‚úÖ Bonus pack activated: +30 generations`)

      return NextResponse.json({
        success: true,
        type: 'BONUS_PACK',
        bonusGenerations: 30,
      })
    }

    return NextResponse.json(
      { error: 'Unknown transaction type' },
      { status: 400 }
    )

  } catch (error) {
    console.error('‚ùå Error activating latest payment:', error)
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}
