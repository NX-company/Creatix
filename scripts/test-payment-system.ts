import { PrismaClient } from '@prisma/client'
import { createTochkaClient } from '../lib/tochka'

const prisma = new PrismaClient()

async function testPaymentSystem() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã...\n')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const testEmail = `test-${Date.now()}@example.com`

    const user = await prisma.user.create({
      data: {
        email: testEmail,
        name: 'Test User',
        appMode: 'FREE',
        freeGenerations: 30,
        usedFreeGenerations: 0,
        advancedGenerations: 0,
        usedAdvancedGenerations: 0,
      }
    })

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.email}`)
    console.log(`   –†–µ–∂–∏–º: ${user.appMode}`)
    console.log(`   FREE –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${user.freeGenerations}`)
    console.log('')

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¢–æ—á–∫–∞ –ë–∞–Ω–∫—É
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–æ—á–∫–∞ –ë–∞–Ω–∫—É...')
    const tochkaClient = createTochkaClient()

    try {
      const token = await tochkaClient.getOAuthToken()
      console.log(`‚úÖ OAuth —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...`)
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OAuth —Ç–æ–∫–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)')
    }
    console.log('')

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–∏–º–∏—Ç–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞)
    console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')

    const transaction = await prisma.transaction.create({
      data: {
        userId: user.id,
        amount: 10, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞
        type: 'SUBSCRIPTION',
        status: 'PENDING',
        metadata: {
          operationId: `test-${Date.now()}`,
          targetMode: 'ADVANCED',
          paymentType: 'subscription',
        },
      }
    })

    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:`)
    console.log(`   ID: ${transaction.id}`)
    console.log(`   –°—É–º–º–∞: ${transaction.amount}‚ÇΩ`)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${transaction.status}`)
    console.log('')

    // 4. –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)
    console.log('4Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã...')

    const subscriptionEndsAt = new Date()
    subscriptionEndsAt.setMonth(subscriptionEndsAt.getMonth() + 1)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.$transaction([
      prisma.transaction.update({
        where: { id: transaction.id },
        data: { status: 'COMPLETED' }
      }),
      prisma.user.update({
        where: { id: user.id },
        data: {
          appMode: 'ADVANCED',
          advancedGenerations: 100,
          subscriptionEndsAt,
          subscriptionStartedAt: new Date(),
        }
      })
    ])

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log('')

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...')

    const updatedUser = await prisma.user.findUnique({
      where: { id: user.id },
      include: {
        transactions: true
      }
    })

    if (!updatedUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:')
    console.log(`   –†–µ–∂–∏–º: ${updatedUser.appMode}`)
    console.log(`   ADVANCED –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${updatedUser.advancedGenerations}`)
    console.log(`   FREE –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${updatedUser.freeGenerations}`)
    console.log(`   –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${updatedUser.subscriptionEndsAt?.toLocaleDateString()}`)
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${updatedUser.transactions.length}`)
    console.log('')

    // 6. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')

    await prisma.transaction.deleteMany({
      where: { userId: user.id }
    })

    await prisma.user.delete({
      where: { id: user.id }
    })

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
    console.log('')

    console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!')
    console.log('   –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:')
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    console.log('   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞')
    console.log('   ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ADVANCED')
    console.log('   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testPaymentSystem()