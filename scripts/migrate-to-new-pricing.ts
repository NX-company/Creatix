/**
 * ===================================================================
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * ===================================================================
 *
 * –ó–∞–ø—É—Å–∫: npx tsx scripts/migrate-to-new-pricing.ts
 *
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
 * 1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * 2. –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:
 *    - FREE ‚Üí FREE_TRIAL_30 (—Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏)
 *    - ADVANCED ‚Üí ADVANCED_100 (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º subscriptionEndsAt)
 * 3. –ù–ï —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */

import { PrismaClient } from '@prisma/client'
import { PACKAGE_CODES } from '../pricing_new/config'

const prisma = new PrismaClient()

interface MigrationStats {
  totalUsers: number
  freeUsers: number
  advancedUsers: number
  migratedFree: number
  migratedAdvanced: number
  skipped: number
  errors: number
}

async function migrateUser(user: any, stats: MigrationStats): Promise<void> {
  const appMode = user.appMode?.toUpperCase()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∞–∫–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existingPackages = await prisma.user_packages.findFirst({
    where: { user_id: user.id },
  })

  if (existingPackages) {
    console.log(`‚è≠Ô∏è  User ${user.email} already has packages, skipping`)
    stats.skipped++
    return
  }

  try {
    if (appMode === 'FREE') {
      // FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí FREE_TRIAL_30
      const usedGenerations = user.freeMonthlyGenerations || 0
      const creditsRemaining = Math.max(0, 30 - usedGenerations)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è (30 –¥–Ω–µ–π —Å –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –∏–ª–∏ —Å–µ–π—á–∞—Å)
      const startsAt = user.lastResetDate || new Date()
      const endsAt = new Date(startsAt)
      endsAt.setDate(endsAt.getDate() + 30)

      await prisma.user_packages.create({
        data: {
          user_id: user.id,
          package_code: PACKAGE_CODES.FREE_TRIAL_30,
          credits_remaining: creditsRemaining,
          allow_images: false,
          starts_at: startsAt,
          ends_at: endsAt,
          source: 'admin', // –ú–∏–≥—Ä–∞—Ü–∏—è
          status: 'active',
        },
      })

      console.log(`‚úÖ Migrated FREE user ${user.email}: ${creditsRemaining}/30 credits`)
      stats.migratedFree++

    } else if (appMode === 'ADVANCED') {
      // ADVANCED –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí ADVANCED_100
      const usedSubscription = user.advancedMonthlyGenerations || 0
      const purchasedRemaining = user.purchasedGenerations || 0

      // –ü–æ–¥–ø–∏—Å–∫–∞: 80 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
      const subscriptionRemaining = Math.max(0, 80 - usedSubscription)

      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)
      // –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –≤—Å—ë –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ, –Ω–æ –ø–æ 100 –∫—Ä–µ–¥–∏—Ç–æ–≤
      const totalRemaining = Math.min(100, subscriptionRemaining + Math.floor(purchasedRemaining))

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionEndsAt = user.subscriptionEndsAt
      if (!subscriptionEndsAt || subscriptionEndsAt < new Date()) {
        console.log(`‚ö†Ô∏è  User ${user.email} has expired ADVANCED subscription, skipping`)
        stats.skipped++
        return
      }

      const startsAt = new Date()
      const endsAt = new Date(subscriptionEndsAt)

      await prisma.user_packages.create({
        data: {
          user_id: user.id,
          package_code: PACKAGE_CODES.ADVANCED_100,
          credits_remaining: totalRemaining,
          allow_images: true,
          starts_at: startsAt,
          ends_at: endsAt,
          source: 'admin', // –ú–∏–≥—Ä–∞—Ü–∏—è
          status: 'active',
        },
      })

      console.log(`‚úÖ Migrated ADVANCED user ${user.email}: ${totalRemaining}/100 credits (expires: ${endsAt.toLocaleDateString()})`)
      stats.migratedAdvanced++

    } else {
      console.log(`‚è≠Ô∏è  User ${user.email} has unknown mode: ${appMode}, skipping`)
      stats.skipped++
    }

  } catch (error) {
    console.error(`‚ùå Error migrating user ${user.email}:`, error)
    stats.errors++
  }
}

async function main() {
  console.log('üöÄ Starting migration to new pricing system...\n')

  const stats: MigrationStats = {
    totalUsers: 0,
    freeUsers: 0,
    advancedUsers: 0,
    migratedFree: 0,
    migratedAdvanced: 0,
    skipped: 0,
    errors: 0,
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await prisma.user.findMany({
    select: {
      id: true,
      email: true,
      appMode: true,
      freeMonthlyGenerations: true,
      advancedMonthlyGenerations: true,
      purchasedGenerations: true,
      subscriptionEndsAt: true,
      lastResetDate: true,
    },
  })

  stats.totalUsers = users.length
  console.log(`üìä Found ${users.length} users\n`)

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–∂–∏–º–∞–º
  stats.freeUsers = users.filter(u => u.appMode?.toUpperCase() === 'FREE').length
  stats.advancedUsers = users.filter(u => u.appMode?.toUpperCase() === 'ADVANCED').length

  console.log(`   FREE: ${stats.freeUsers}`)
  console.log(`   ADVANCED: ${stats.advancedUsers}`)
  console.log(`\n‚è≥ Starting migration...\n`)

  // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–¥–Ω–æ–º—É
  for (const user of users) {
    await migrateUser(user, stats)
  }

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\n‚úÖ Migration completed!\n')
  console.log('üìä Statistics:')
  console.log(`   Total users: ${stats.totalUsers}`)
  console.log(`   Migrated FREE ‚Üí FREE_TRIAL_30: ${stats.migratedFree}`)
  console.log(`   Migrated ADVANCED ‚Üí ADVANCED_100: ${stats.migratedAdvanced}`)
  console.log(`   Skipped: ${stats.skipped}`)
  console.log(`   Errors: ${stats.errors}`)
  console.log(`\n‚úÖ Old User fields were NOT deleted (backward compatibility)`)
}

main()
  .catch((error) => {
    console.error('‚ùå Migration failed:', error)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
