import { createTochkaClient } from '../lib/tochka'

async function configureWebhook() {
  try {
    const tochkaClient = createTochkaClient('v1.0')

    // –ü–æ–ª—É—á–∏—Ç—å OAuth —Ç–æ–∫–µ–Ω
    console.log('üîê Getting OAuth token...')
    const token = await tochkaClient.getOAuthToken()
    console.log('‚úÖ Token obtained')

    const clientId = process.env.TOCHKA_OAUTH_CLIENT_ID || process.env.TOCHKA_CLIENT_ID

    if (!clientId) {
      throw new Error('TOCHKA_OAUTH_CLIENT_ID or TOCHKA_CLIENT_ID not found in environment')
    }

    console.log(`üìã Client ID: ${clientId}`)

    // 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    console.log('\nüì• Getting current webhook settings...')

    const getResponse = await fetch(
      `https://enter.tochka.com/uapi/webhook/v1.0/${clientId}`,
      {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json',
        },
      }
    )

    if (!getResponse.ok) {
      const errorText = await getResponse.text()
      console.log(`‚ö†Ô∏è  Current settings not found (${getResponse.status}):`, errorText)
    } else {
      const currentSettings = await getResponse.json()
      console.log('üì¶ Current settings:', JSON.stringify(currentSettings, null, 2))
    }

    // 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook URL –∏ —Å–æ–±—ã—Ç–∏—è
    console.log('\nüîß Configuring webhook...')

    const webhookConfig = {
      url: 'https://aicreatix.ru/api/payments/webhook',
      events: [
        'acquiringInternetPayment',  // –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã
        'incomingSbpPayment',        // –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –°–ë–ü
      ],
    }

    console.log('üì§ Sending configuration:', JSON.stringify(webhookConfig, null, 2))

    const putResponse = await fetch(
      `https://enter.tochka.com/uapi/webhook/v1.0/${clientId}`,
      {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(webhookConfig),
      }
    )

    if (!putResponse.ok) {
      const errorText = await putResponse.text()
      throw new Error(`Failed to configure webhook: ${putResponse.status} - ${errorText}`)
    }

    const result = await putResponse.json()
    console.log('‚úÖ Webhook configured successfully!')
    console.log('üì¶ Response:', JSON.stringify(result, null, 2))

    // 3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É webhook
    console.log('\nüß™ Testing webhook delivery...')

    const testResponse = await fetch(
      `https://enter.tochka.com/uapi/webhook/v1.0/${clientId}/test_send`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          event: 'acquiringInternetPayment',
        }),
      }
    )

    if (!testResponse.ok) {
      const errorText = await testResponse.text()
      console.log(`‚ö†Ô∏è  Test webhook failed (${testResponse.status}):`, errorText)
    } else {
      const testResult = await testResponse.json()
      console.log('‚úÖ Test webhook sent!')
      console.log('üì¶ Response:', JSON.stringify(testResult, null, 2))
    }

    console.log('\n‚úÖ Webhook configuration completed!')
    console.log('üìã Summary:')
    console.log('   URL: https://aicreatix.ru/api/payments/webhook')
    console.log('   Events: acquiringInternetPayment, incomingSbpPayment')
    console.log('\n‚ö†Ô∏è  Check your server logs for the test webhook!')

  } catch (error) {
    console.error('‚ùå Error:', error)
    process.exit(1)
  }
}

configureWebhook()
